A Neural Architecture for Designing Truthful and Efficient Auctions Andrea Tacchetti, DJ Strouse, Marta Garnelo, Thore Graepel and Yoram Bachrach DeepMind, UK {atacchet, strouse, garnelo, thore, yorambac}@google.com Abstract Auctions are protocols to allocate goods to buyers who have preferences over them, and collect payments in return. Economists have invested significant effort in de- signing auction rules that result in allocations of the goods that are desirable for the group as a whole. However, for settings where participants’ valuations of the items on sale are their private information, the rules of the auction must deter buyers from misreporting their preferences, so as to maximize their own utility, since mis- reported preferences hinder the ability for the auctioneer to allocate goods to those who want them most. Manual auction design has yielded excellent mechanisms for specific settings, but requires significant effort when tackling new domains. We propose a deep learning based approach to automatically design auctions in a wide variety of domains, shifting the design work from human to machine. We assume that participants’ valuations for the items for sale are independently sampled from an unknown but fixed distribution. Our system receives a data-set consisting of such valuation samples, and outputs an auction rule encoding the desired incentive structure. We focus on producing truthful and efficient auctions that minimize the economic burden on participants. We evaluate the auctions designed by our framework on well-studied domains, such as multi-unit and combinatorial auctions, showing that they outperform known auction designs in terms of the economic burden placed on participants. 1 Introduction Mechanism design is a field in economics that deals with setting incentives and interaction rules among self-interested agents so as to achieve desired objectives for the group as a whole. It is sometimes referred to as “inverse game theory”: in game theory we set the rules of a game, and study the behaviors that emerge, while in mechanism design we have a target behavior we wish to encourage, and we set the rules of the game so that agents acting in their own self-interest will gravitate towards that desired outcome. One prominent problem in mechanism design is engineering auction rules, as auctions account for a large proportion of economic activity, such as the sponsored search auction (the main source of revenue for search engines), e-commerce websites such as eBay, or the fine art market [2, 11, 21]. One possible goal of an auction design is to maximize the revenue to the auctioneer [24]. In many cases, however, we are merely interested in allocating a set of goods in order to maximize the total welfare of participants (and thus minimize revenue to the auctioneer). One example are spectrum auctions [8], in which governments want to allocate the rights (licenses) to transmit signals over specific bands of the electromagnetic spectrum. The government may wish to allocate the scarce transmission rights to the firms who value these the most, with the goal of maximizing job creation, trade, and economic welfare. However, the true valuation a firm has for a spectrum band is only known to the firm, rather than to the government. If the government simply declared they would give a band to the firm who wants it most without extracting payments, then all firms who want the band 9102 luJ 11 ]AM.sc[ 1v18150.7091:viXra
a non-zero amount would be incentivized to lie and say they value the band arbitrarily highly, and the government could not ensure an optimal allocation. Thus, the auction design challenge for the government becomes: which prices should it charge in order to get truthful reports regarding firms’ valuations, and optimally allocate the spectrum bands, while still minimizing the economic burden on participants? We propose a learning approach to auction design. The point of departure from the existing economics literature is that we make the (often reasonable) assumption that bidders’ valuations for the goods up for sale cannot take any value, but rather are sampled from an unknown, but fixed, probability distribution (e.g. it is very unlikely anyone would pay $500,000 for a burrito). Under these settings we introduce a representation of bidders’ preferences and a network architecture that can be used to learn auction rules that a) incentivize truthful reports from the participants, b) result in the social- welfare-maximizing allocation of the goods in question, and c) place minimal economic burden on the participants (i.e. extract minimal payments). We show that the proposed approach can learn truthful mechanisms under a wide variety of settings, including various “bidding languges” [25] (i.e. the set or outcomes that bidders can have preferences over), arbitrary distributions of valuations, and arbitrary numbers of participants. Moreover, the resulting payment rules generalize over varying number of participants. Auctions are a pillar of economics and the market protocol of choice for a significant portion of world-wide trade. Similar to what Hartford et al. [19] have done for modeling human strategic behavior, here we show that, under reasonable assumptions, designing auctions that shepherd the behavior of rational participants towards desirable outcomes can be cast as a supervised function approximation problem, thus unlocking the application of modern machine learning methods, and in particular deep learning, to this field. 2 Background and notation Mechanism design Mechanism design deals with choosing from a set K of possible alternatives, where we have a set N = 1, 2, . . . , n of agents who each have preferences regarding the alternatives { } in K, expressed in monetary terms. Auction design relates to the specific case where we have a set I of items, and the alternative set K consists of all the possible ways to allocate the items to the agents. We call a subset of items B I a bundle, and let (I) be the power set of I (that is, the set of all ⊆ P possible bundles). An allocation of the items is a function k : N (I) mapping each agent i to a → P bundle of items k(i) I, such that for any i = j we have k(i) k(j) = (i.e. no item is allocated ⊆ 6 ∩ ∅ more than once). Each agent, with knowledge of their own true preferences, reports what is commonly referred to as a “type”: for each allocation k K the agent communicates to the mechanism a valuation for that outcome θ (k) Θ . In particu∈ lar, participants may choose to report truthfully and submit v (k)1. i i i ∈ The mechanism then selects an allocation according to a choice rule c : Θ ... Θ K and 1 n × × → determines the agents’ payments using a payment rule t i : Θ 1 . . . Θ n R, where t i is the payment for the ith agent. Note that “payments” can be negative,× that is× the au→ ctioneer can also pay participants. After payments are collected, each agent thus derives utility u (k, t ) = v (k) t from i i i i the interaction2. − Allocation efficiency The main goal of the designs we consider is to choose an efficient outcome: allocate items to those who want them the most, maximizing social welfare. We thus fix the choice function c to c = arg max v (k) = k . k K i i ∗ ∈ Strategic behavior Selecting tPhe welfare maximizing allocation is difficult when the mechanism does not have access to the true preferences of each agent, but only to their reported types. This asymmetry in information leads to strategic behavior: rational participants will report what- ever preference θ maximizes their utility under the mechanism (post payment). Let θ indi- i i cate all reports, truthful or otherwise, from all agents but i; then rational agents will−report: θ = arg max u (c(θ , θ), t (θ , θ)). In general θ = v . i θ ∈Θi i −i i −i i 6 i 1One common assumption is that each agent only cares about the items allocated to them, that is v i = v(k(i)). 2With a slight abuse of notation, we will sometimes drop v i and θ i’s explicit dependence on each allocation k, and simply denote with v i and θ i the collections of preferences that can be held and expressed by player i. That is, given an arbitrary ordering of the choice set K, so that K = [k 1, k 2, . . . , k K ], we will use v i and θ i to refer to the vectors v i = [v i(k 1), . . . , v i(k K )], and θ i = [θ i(k 1), . . . , θ i(k K )]. | | | | | | 2
Truthful mechanisms In the presence of rational agents, and for our choice of allocation function, it is possible to select a payment rule that makes reporting one’s true preferences the dominant strategy. That is, for any agent i, and for all possible reports, or misreports, from other players θ , . . . , θ , θ , . . . , θ , the best course of action is to tell the truth: 1 i 1 i+1 n arg max u (k (θ , θ), t (θ− , θ)) = v (where we bypassed the explicit dependence on the choice fuθ n∈cΘ tii oni c, ∗ and−li et k di ep−eni d on θ diri ectly). ∗ We restrict our attention to mechanisms that are both efficient and truthful. The only such mechanisms are members of the Groves family, and their payment rule can be written as [15, 14, 13]: t i(θ i, θ i) = h(θ i) v j(k ∗(θ i, θ i)), (1) − − − − j=i X6 where, h : Θ i R may be any function that only depends on the reported types of agents other than i, and k −is→ the optimal allocation defined previously. ∗ Individual rationality In the presence of strategic agents, we must ensure that bidders are never worse off participating in the auctions we design than not. We should guarantee that our auc- tions are individually rational: any agent who truthfully reports their preferences realizes a non-negative utility. That is, regardless of reports from other agents θ , we wish to have i u (v , θ ) = u (k (v , θ ), t (v , θ )) 0. − i i i i ∗ i i i i i − − − ≥ Weak budget balance Finally, we wish to design mechanisms that do not require a subsidy to operate. That is, we require that the sum of payments collected by the mechanism be non-negative: t 0. i i ≥ Vickrey-Clarke-Groves auctions One of the main results of mechanism design is an auPction rule that satisfies all the criteria we listed above for any realization of agents’ preferences: the Vickrey- Clarke-Groves (VCG) auction. VCG is both efficient, and truthful, and as such it is a member of the Groves family. It is characterized by the choice of function h(θ ) that completes the payment rule in i Eq. 1: h = v (k (θ )). In words, h is the collec−tive value realized by all other agents VCG j=i j ∗ i VCG when agent i is rem6 oved from− the auction. Thus, the completed VCG payment t for agent i (see VCG P Eq. 1) is the reduction in the collective value realized by all other agents due to agent i’s participation in the auction.3 A special case of a VCG auction for a single item is the well-known second-price auction (e.g. an eBay auction with no reserve price). VCG is the most widely accepted truthful and efficient mechanism (e.g. it is used for Facebook ad auctions [31]). VCG does not, however, aim to minimize the economic burden on participants, as we do here. Bidding languages Since we focus on efficient mechanisms, we must ensure that k ∗ can be computed quickly, even for relatively large numbers of players (see Allocation Efficiency). We thus restrict the way in which participants may express their preferences. Such representations are called bidding languages [25]. We consider the following three languages. Multi-unit auctions with decreasing marginal utilities The first bidding language we examine considers selling multi-unit bundles to participants’ whose preferences depend only on the size of bundles but not on their component objects. This language is useful for selling multiple identical units of the same kind. We further impose that larger bundles cannot be valued less than smaller ones. In these auctions k can be calculated greedily by allocating objects one by one. ∗ Heterogeneous objects with unit demand The second bidding language we consider is useful when players can take advantage of at most one of items they receive. For example, vacation packages for a specific week. The valuation for a bundle of items, in this case, is identical to the valuation of the best object in the bundle. The allocation function k is found by solving the maximum-weighted bipartite ∗ matching between bidders and items, where participants’ preferences are incorporated as weights. Hierarchical bundles Finally, we consider a bidding language that is useful to express preferences for a hierarchy of bundles. For example, home builders might bid to be awarded the contract to develop two lots, with up to two new homes within each lot. The spatial nature of the work makes building individual homes in separate lots is less cost-effective. Thus participants can express preferences for a hierarchy of bundles: component objects are arranged as the leaves of a binary tree, and valuations can be expressed for leaf-nodes (individual objects), or for any sub-tree. The integer program required to find k can be relaxed as a feasible linear program [25]. ∗ 3For this reason, [27] summarizes the effect of the VCG payment rule as to “internalize the externality.” 3
3 Problem statement and main contributions Equipped with the definitions of Sec. 2, we can proceed to state our objective: To design truthful and allocatively-efficient auctions, minimizing the sum of payments collected by the mechanism, while keeping the auction individually-rational and weakly budget balanced. Minimizing the sum of payments is useful in settings such as the spectrum auction, where the goal is to allocate a scarce resource in an optimal way; the payments t are by-products resulting from the i need to elicit true reports, so it is desirable to minimize them. Additionally, we strive to have adhere to the following desiderata: we seek a payment rule that is a) “convolutional” over players [22] (i.e. the same function is used to compute the payment owed by each player), b) invariant to the order of other participants for each player (i.e. the payment of player 2 does not change if players 1 and 3 swap bids), and c) robust to changes in the number of participants. In pursuit of this goal, we propose three main technical contributions. a) We show how the problem of designing truthful and efficient auctions can be cast as supervised function approximation. b) We introduce a novel representation of efficient auctions as a collection of counterfactual smaller auctions. c) We propose a network architecture to learn Groves payment rules based on our representation which supports various bidding languages and an arbitrary (and even varying) number of bidders. 4 Related Work Mechanism design is a relatively mature field. We rely on the framework of the Vickrey-Clarke- Groves mechanism [5] presented in the 1970s, based on earlier work on auctions that Vickrey had conducted in the 1960s [32]. The design of auctions and mechanisms has been done predominantly manually, where a person uses their experience or intuition to come up with interaction or payment rules leading to their desired objective. Economists have designed incentive schemes for various goals, such as minimizing the burden on participants while maintaining efficiency [14, 1] or maximizing revenue [24, 4, 29]. The field of automated mechanism design, where we let a computer design an incentive scheme to meet desired objectives, is relatively new [6, 30, 7, 18, 16]. Early work on automated mechanism design has focused on producing incentive compatible mechanisms, where truthfulness is a Nash equilibrium [30, 7]. In contrast, we aim to achieve truthfulness in the strong sense of a dominant strategy, where agents opt for a truthful report no matter what other agents do. More recently, economists have given significant attention to efficient mechanisms where truthfulness is a dominant strategy, characterizing the family of Groves mechanisms as the only class of mecha- nisms which are truthful, efficient, individually rational and weakly budget balanced [15, 26]. They have also provided negative results, showing that it is impossible to guarantee full budget-balance (i.e. t = 0), in fully truthful and efficient mechanisms [14]. Given these results, researchers i i have manually constructed Redistribution Mechanisms, specific members in the Groves family that maxiPmize budget-balance (i.e. minimize agent payments while requiring no subsidy) in restricted settings. We also use the general family of Groves mechanisms, or more specialized cases of Groves redistribution mechanisms, but rather than manually building incentive schemes to achieve high budget balance in specific settings, we take an automated mechanism design approach, using machine learning to identify good members of the Groves family. Closest to our work are recent approaches for automated mechanism design through machine learning, and deep learning in particular [10, 12, 23]. These approaches search a family of payment functions for a mechanism with desired properties by defining a loss relating to the desired properties. While our approach is similar, we propose a more elaborate neural network architecture to capture reasonable auction rule properties, tackle the more demanding domain of combinatorial auctions under various bidding languages [9, 25], and crucially we are able to learn mechanisms that are truthful in the strong sense and support arbitrary, and even variable number of bidders. 5 Methods: mechanism design as a supervised learning problem Here we introduce the details of our main technical contributions: we show how the problem of completing the Groves payment is equivalent to supervised function approximation. We 4
CNN 2-Layer ⅀ Decoder Linear Rectified Channel 7: Utility of assignment in Distributed representations Channel 6. of each player’s preferences. Channel 6: Assignment of 3 most valuable objects. Channel 5: Utility of assignment in Channel 4. Channel 4: Assignment of 2 most Utilv ita yl u C Coa fh h b aa al sn ne sn n o ie egb l ln j 3 2e m: .c ets n. t in Players (except i) Number of Objects Channel 2: Assignment of most valuable object. Sum pooling builds invariance to ordering of Channel 1: The same 2-Layer MLP is applied to each other players and robustness to number of All players’ valuations player’s preference embedding. participants. except i’s. MLP Per-player Final representation of a counter-factual auction where player i did not participate. Figure 1: Example of Auction representation and network architecture (best viewed in color). In this example we represent a multi-unit auction with decreasing marginal utilities with five players, and three objects. We construct the network input to compute the Groves payment rule or redistribution for player 1. The input tensor is of size (n 1) K 2 K + 1 = 4 3 7 and is constructed as shown in the figure, on the left − × | | × | | × × (darker shades of red indicate higher valuations in the first channel). This representation is processed with a 2-layer CNN that extracts a per-player distributed representation of preferences and a per-player 2-Layer MLP (with shared weights across the players). The resulting embeddings are sum-pooled to build invariance to the ordering of players, and robustness to the number of participants, and decoded into a single positive number. introduce our novel representation of efficient auctions, and we propose a network architecture to learn social-utility-maximizing, truthful auctions. We seek to design efficient and truthful mechanisms that are, at least in expectation, as close to budget balanced as possible. As discussed in Sec. 2, all mechanisms that are truthful and efficient belong to the Groves family (and vice versa), so we restrict our search to this family, and effectively seek to complete the Groves payment rule by selecting a function h : Θ i R (see Eq. 1). − → 5.1 Loss function: completing the Groves payment rule The aim is then to complete the payment rule t of a Groves mechanism so that, in expectation over i valuation profiles sampled from ρ, we minimize the sum total of payments received by the mechanism. However, minimizing payments without any further constraint will result in mechanisms that require a subsidy to operate. Since this is undesirable, we incorporate a non-deficit constraint. Similarly, ensure that strategic players are never worse off participating in our mechanism than not, by including an individual rationality constraint for all players. The resulting “ideal” mechanism design problem we wish to solve is thus: n n h ∗ = arg hmin Evi∼ρ " t i # s.t. " t i # ≥ 0, and, v i(k ∗) − t i ≥ 0, (2) ∈H i=1 i=1 X X where t is like in Eq. 1. As mentioned above, we assume we do not have access to the true distribution i ρ, so that we cannot solve this minimization analytically. We do, however, assume we have access to a data-set of L realized n-player profiles D = (vl , . . . , vl l = 1, . . . , L , sampled i.i.d. from ρ. We { 1 n| } therefore use use Lagrange multipliers λ , and λ to encode the non-deficit, and individual rationality b r constraints, and minimize the empirical version of our loss: L n n 2 n hˆ = arg min tl + λ min tl, 0 + λ min vl(k ) tl, 0 2 . h  i b ( i )! r i ∗ − i  ∈H Xl=1 Xi=1 Xi=1 Xi=1 (cid:16)(cid:0) (cid:8) (cid:9)(cid:1) (cid:17)   (3) Selecting a Groves payment rule Concretely, we introduce two alternatives to learning a Groves payments rule hˆ: first, we investigate constructing a neural network to implement hˆ directly and minimize the empirical loss in Eq. 3, given a data-set of realized valuation profiles. 5
Learning a VCG redistribution mechanism Our second approach amounts to learning a VCG redistribution mechanism. In this case, we use a neural network to implement a redistribution function r(v , . . . , v , v , . . . , v ), and let hˆ( ) = h ( ) r( )4. Note that in this case 1 i 1 i+1 n VCG individual rationality−can be guaranteed by simply · ensuring that· r− takes· non-negative values, since VCG is individually rational and giving payments back can only increase participants’ utilities. The same representation and network architecture is used in both settings. 5.2 The hypothesis space: auction representation and network architecture Representing auctions We select a hypothesis space so that, in practice, we can solve the H minimization problem in Eq. 3, given access to a data-set D of valuation profiles. To this end, we introduce a novel representation of auctions that supports learning Groves payment rules with Deep Neural Networks. Fig. 1 shows an example of our representation and architecture for an auction with three objects and five participants. When computing t , the payment owed by player i, the function we wish to learn has access to i reports from “other” players, but no knowledge of player i’s valuation (see Eq. 1). We construct our representation to highlight the magnitude of each individual bid, and preference profile, relative to the rest of the “other” players’ types. The intuition behind this choice is that by comparing the available bids to each other, a network can construct a sense of how likely it is that these will be surpassed or matched by the unseen preference profile. This is achieved as follows: first, since we focus on efficient mechanisms, we assume we are given access to an “allocation oracle” (a function that for any set of valid preferences profiles, returns the welfare maximizing allocation k K5, see Sec. 2). ∗ ∈ Second, we choose to represent each of the v as outcomes of K counter-factual auctions, each for i the most valuable p bundles (p = 1, . . . , K −), thus providing i| nfo| rmation about the relative rank of | | each bundle valuation and preference profile. We provide evidence that an alternative representation of the same information as a flat vector results in substantially worse auction designs. Precisely, given a data-set of realized valuation profiles D, and an allocation oracle, for each player i, we construct a tall “image” with “spatial dimensions” K (n 1), and 2 K + 1 | | × − | | “ rc eh pa ren sn ee nl ts i” n. g T thh ee ufi tir ls it ty“c ph laa yn en re jl” wis oua ldm ra et ari lx izeV −fri om∈ rR ec+|K ei| v× in(n g− b1 u) nw di lt eh mn .on E- an ce hga st uiv cce ee sn sit vri ees ch( am nn, j el) p is constructed by considering the outcome of a counter-factual auction where the n 1 players − bid for the p most valuable bundles. In particular, the second channel contains the allocation matrix k 0, 1 K (n 1) with entries (m, j) = 1 if bidder j is allocated bundle m, and zero otherwise. 1∗ ∈ { }| |× − The third channel represents the amount of utility realized by each player for this allocation (the element-wise product between the first and second channels). Similarly, the fourth channel contains k : the allocation for two bundles, and the fifth channel contains the element-wise product between 2∗ channels 1 and 4, and so on until all bundles are considered. We alter this representation slightly to in multi-unit auctions with decreasing marginal utilities. In this case the matrix V contains, for each i player, the marginal utility of adding one item to their bundle and has size B −(n 1), with B the | | × − set of available items. A network architecture to learn Groves payment rules Given our auction representation, we propose an architecture to learn a Groves payment rule that satisfies the desiderata outlined in Sec. 3 and is: a) “convolutional” over players, b) invariant to the order of other participants for each player, and c) robust to changes in the number of participants. For each player i, we construct the input tensor of size K (n 1) (2 K +1) described above and | |× − × | | pass it through a 2-layer CNN. The first layer uses 64 filters of spatial size 1 1 so as to construct an × embedding of each individual bid (how soon each bundle is allocated, and how much utility it realizes can be readily extracted from a single “column” in our representation). The second CNN layer has 64 filters of size K 1. The CNN’s output has size 1 (n 1) 64, and contains an embedding of | | × × − × each of the n 1 players’ preferences. We follow our CNN with a 2-Layer 64 hidden and output units − MLP, which we apply independently to each of the (n 1) player preference embeddings to produce − 4This is referred to as a “redistribution” mechanism because it can be viewed as collecting the VCG payments and then “redistributing” some of them back to participants. 5Note that this is reasonable given our choice of bidding languages. 6
Setting considered Guo et al. [17] Manisha et al. [23] G-CNN (ours) R-CNN (ours) Arbitrary distribution NO YES YES YES No knowledge of dist. NO YES YES YES Arbitrary # of participants NO NO YES YES Varying # of participants NO NO YES YES Multi-unit auctions YES NO YES YES Unit-demand auctions NO YES YES YES Hierarchical bundles auctions NO NO YES YES Guarantees no-deficit YES NO NO NO Guarantees indiv. rationality YES YES NO YES Table 1: Qualitative results. The method we propose here can be applied in more general settings than previously proposed alternatives. Models: G-CNN: learns a Groves payment rule directly using our data representation and network architecture. R-CNN: learns a VCG redistribution payment rule using our data representation and network architecture. a new embedding for each player. We then sum-pool over the n 1 players (which guarantees the − desired robustness properties), and apply a linear decoder (with ReLU rectification) to output a single value for either hˆ directly, or for a redistribution function r6. 5.3 Experimental procedure For each combination of number of participants, valuation distribution and bidding language we consider, we construct an “auction simulator” that returns sample auctions (i.e. valuation profiles for all participants, expressed in the appropriate language). We use each simulator to construct training and testing data-sets containing 100,000 and 2,000 auctions respectively. For each auction, we construct the representation described in Sec. 5.2, and train the auction design network above using Adam SGD [20] with a learning rate of 10 5, mini-batches of size 256, and for 250,000 − iterations. In all experiments we set λ = λ = 100 (see Eq. 3). After training, we use our held-out b r test set to report performance. The details of our auction simulators (details on the distributions we consider, how we construct bundles, and how we implement the allocation function for each bidding language) can be found in the Supplementary Material. In all experiments the number of objects for sale were as follows: with non-decreasing marginal utilities: 15 objects, with heterogeneous objects and unit-demand: 8 objects, and with hierarchical bundles: 8 component objects (resulting in 15 bundles). Baselines We consider four baselines when reporting our performance. 1) VCG auctions, the most commonly used Groves mechanism: a truthful, efficient, weakly budget balanced and individually ra- tional auction. 2) Guo and Conitzer [17] a provably optimal-in-expectation linear VCG redistribution mechanism, which requires n < K , analytical knowledge of ρ, and only handles multi-unit auctions. | | 3) Manisha et al. [23] a VCG redistribution learned using a MLP architecture that requires n < K , | | does not support hierarchical bundles, and only works with unit-demand valuations. 4) MLP based architecture lastly, we compare to a 2-layer, 128-hidden-unit MLP that operates on a flattened version of the same data to empirically support our choice of representation and architecture. 6 Results Qualitative comparison with alternative methods We start with a qualitative comparison with two existing alternative methods to automatically construct VCG redistribution mechanisms (see Sec. 4), and highlight how our method can be applied in more general settings in Tab. 1. A quantitative comparison with these two methods (in the settings in which they can be applied) shows how our methods also leads to better performance in practice (see the Supplementary Material). Importantly, while our method does not guarantee we will find auctions that are weakly budget balanced and individually rational, our quantitative result show that, in practice, we find zero, or next-to-zero violations of these constraints (see next paragraph). 6This architecture is effectively a DeepSets network applied to a graph of n 1 nodes, and a single global − output [33, 3]. The node functions are our CNN+MLP and the aggregator function is a sum. 7
100 80 60 40 20 0 Multi-Unit Unit Dem. Hier. Bund. denruteR tegduB GCV fo % 5 4 3 2 1 0 Multi-Unit Unit Dem. Hier. Bund. ticifeD htiw snoitcuA fo % 100 G-CNN G-MLP 80 R-CNN R-MLP 60 40 20 0 Multi-Unit Unit Dem. Hier. Bund. (a) n = 10. denruteR tegduB GCV fo % 5 4 3 2 1 0 Multi-Unit Unit Dem. Hier. Bund. ticifeD htiw snoitcuA fo % G-CNN R-CNN (b) Train: n 9, 11 . Test: n = 10 ∈ { } Figure 2: Quantitative results. We report performance as the average reduction in payments collected relative to the VCG mechanism (higher is better). Displayed: average performance across 2, 000 auctions sampled from ρ, mean and standard deviation across 5 training seeds. For each choice of model and bidding language we also report the fraction of auctions that resulted in a deficit (i.e. the mechanism had to be subsidized) (lower is better). The right panel shows interpolation to a previously unseen number of participants (note that MLP-based models do not support this, so their performance is not reported). Models: G-CNN: learn a groves payment rule directly using our data-representation and network architecture (ours). G-MLP: learn a groves payment rule directly using a MLP. R-CNN: Learning a VCG redistribution mechanism using our network architecture (ours). R-MLP: Learning a VCG redistribution mechanism using a MLP. Quantitative results We illustrate quantitative results on synthetic auction data-sets in Fig. 2. Our experiments show that auctions learned using our data representation and network architecture result in a significantly smaller economic burden on the participants than using VCG, and crucially, that we are able to learn auction rules with zero or next to zero violations of the weak budget balance constraint (i.e. mechanisms should operate without a subsidy). We highlight this by comparing our designs with auction rules based on MLP architectures trained on the same data. Fig. 2 shows results for valuations distributed as ρ = ( (10.0, 1.0), (2.0, 0.5)) (where (µ, σ) N N N N is a Gaussian distribution with the appropriate parameters, clipped at 0 from the left). We leave 2 further examples of distributions in the Supplementary Material. The left panel of Fig. 2 shows results on the three bidding languages we consider and for a fixed number of participants. Learning a Groves payment rule directly with our architecture and data representation (G-CNN) results in a reduction of payments collected, relative to VCG, by at least 60%, and in zero violations of the no-deficit constraint. Using our representation and architecture to learn a VCG redistribution mechanism (R- CNN) results in a higher percentage of the budget returned, and in next-to-zero violations of the weak budget balance constraint. In this case we are able to compare our architecture with MLP baselines which result in a relatively larger number of violations (some of which incur in egregious deficits of up of 50% of the VCG budget, see Supplementary Material). Note how across the two design choices of learning a Groves payment rule or learning a redistribution mechanism, our CNN based architecture consistently results in fewer constraint violations. The right panel shows the case where the auction rule we learn is required to interpolate to a previously unseen number of participants. Again our data representation and network architecture result in a dramatic reduction of the economic burden placed on participants relative to VCG, and, when we learn a redistribution (R-CNN), in zero constraint violations. MLP baselines cannot operate on a variable number of participants so we are unable to show a comparison. In the Supplementary Material we report results from testing the same network on a varying number of participants. Note that since we strive to minimize payments, we find zero, or next to zero, violations of the individual rationality constraints in any of the models (i.e. participants never pay for a bundle more than they think it’s worth). 7 Discussion of findings and conclusion We investigated a machine-learning based approach to automated mechanism design and introduced the first truly general-purpose data representation, network architecture, and robust problem for- mulation to learn truthful and efficient auction rules automatically, given access only to a data-set of valuations. We introduced a novel way to represent auctions as a collection of “counter-factual” smaller auctions, and proposed a neural architecture that operates on this representation, to learn truthful and efficient mechanisms with minimal economic burden on the participants. Our methods can be applied on a wide variety of settings including arbitrary distributions, complex bidding lan- guages and variable number of participants. Our empirical analysis shows how the resulting auctions collect only a small fraction of the VCG budget, and almost never require a subsidy. 8
Mechanism design is a pillar of economics and social sciences and the domain of choice to study how a central authority can shape the incentives of self-interested individuals in pursuit of group metrics of success (e.g. elicit truthful reports and maximize social welfare). Nonetheless, very few attempts to apply machine learning ideas in this domain have been made. Here we show that under certain reasonable assumptions, the special case of auction design can be turned into a supervised learning problem and the modern tools of statistical learning and deep networks can be brought to bear. The recent renaissance of Artificial Intelligence points to a future where multiple artificial agents act in a shared environment to maximize individual rewards, realizing the vision of the machina economicus [28]. In this context, it is paramount to investigate how to automatically translate high- level group-wide metrics of success, such as “social welfare maximization” and “truth-telling”, to individual-level incentive structures. This work is a first step in this direction, and builds heavily on the economics literature on the subject. Future efforts will focus on the extension of these ideas beyond auctions to more general decision problems. References [1] Lawrence M Ausubel and Paul Milgrom. The lovely but lonely Vickrey auction. Combinatorial Auctions, 17:22–26, 2006. [2] Patrick Bajari and Ali Hortaçsu. The winner’s curse, reserve prices, and endogenous entry: Empirical insights from eBay auctions. RAND Journal of Economics, pages 329–355, 2003. [3] Peter W. Battaglia, Jessica B. Hamrick, Victor Bapst, Alvaro Sanchez-Gonzalez, Vinícius Flo- res Zambaldi, Mateusz Malinowski, Andrea Tacchetti, David Raposo, Adam Santoro, Ryan Faulkner, Çaglar Gülçehre, Francis Song, Andrew J. Ballard, Justin Gilmer, George E. Dahl, Ashish Vaswani, Kelsey R. Allen, Charles Nash, Victoria Langston, Chris Dyer, Nicolas Heess, Daan Wierstra, Pushmeet Kohli, Matthew Botvinick, Oriol Vinyals, Yujia Li, and Razvan Pas- canu. Relational inductive biases, deep learning, and graph networks. CoRR, abs/1806.01261, 2018. [4] Jeremy Bulow and John Roberts. The simple economics of optimal auctions. Journal of Political Economy, 97(5):1060–1090, 1989. [5] Edward H Clarke. Multipart pricing of public goods. Public Choice, 11(1):17–33, 1971. [6] Vincent Conitzer and Tuomas Sandholm. Complexity of mechanism design. In Proceedings of the Eighteenth Conference on Uncertainty in Artificial Intelligence, pages 103–110. Morgan Kaufmann Publishers Inc., 2002. [7] Vincent Conitzer and Tuomas Sandholm. Self-interested automated mechanism design and implications for optimal combinatorial auctions. In Proceedings of the 5th ACM Conference on Electronic Commerce, pages 132–141. ACM, 2004. [8] Peter Cramton. The FCC spectrum auctions: An early assessment. Journal of Economics & Management Strategy, 6(3):431–495, 1997. [9] Sven De Vries and Rakesh V Vohra. Combinatorial auctions: A survey. INFORMS Journal on Computing, 15(3):284–309, 2003. [10] Paul Dütting, Zhe Feng, Harikrishna Narasimhan, and David C Parkes. Optimal auctions through deep learning. arXiv preprint arXiv:1706.03459, 2017. [11] Benjamin Edelman, Michael Ostrovsky, and Michael Schwarz. Internet advertising and the generalized second-price auction: Selling billions of dollars worth of keywords. American Economic Review, 97(1):242–259, 2007. [12] Zhe Feng, Harikrishna Narasimhan, and David C Parkes. Deep learning for revenue-optimal auctions with budgets. In Proceedings of the 17th International Conference on Autonomous Agents and MultiAgent Systems, pages 354–362. International Foundation for Autonomous Agents and Multiagent Systems, 2018. [13] Jerry Green and Jean-Jacques Laffont. Characterization of Satisfactory Mechanisms for the Revelation of Preferences for Public Goods. Econometrica, 45(2):427–438, 1977. [14] Jerry R. Green and Jean-Jacques Laffont. Incentives in Public Decision Making. North-Holland, Amsterdam, 1979. [15] Theodore Groves. Incentives in Teams. Econometrica, 41(4):617–631, 1973. 9
[16] Mingyu Guo and Vincent Conitzer. Computationally feasible automated mechanism design: General approach and case studies. In Twenty-Fourth AAAI Conference on Artificial Intelligence, 2010. [17] Mingyu Guo and Vincent Conitzer. Optimal-in-expectation redistribution mechanisms. Artificial Intelligence, 174(5-6):363–381, 2010. [18] Mohammad Taghi Hajiaghayi, Robert Kleinberg, and Tuomas Sandholm. Automated online mechanism design and prophet inequalities. In Twenty-First AAAI Conference on Artificial Intelligence, volume 7, pages 58–65, 2007. [19] Jason S Hartford, James R Wright, and Kevin Leyton-Brown. Deep learning for predicting human strategic behavior. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett, editors, Advances in Neural Information Processing Systems 29, pages 2424–2432. Curran Associates, Inc., 2016. [20] Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. CoRR, abs/1412.6980, 2015. [21] Paul Klemperer. Auctions: theory and practice. Princeton University Press, 2018. [22] Yann LeCun, Yoshua Bengio, et al. Convolutional networks for images, speech, and time series. In Michael Arbib, editor, The Handbook of Brain Theory and Neural Networks, pages 255–258. MIT Press, 1995. [23] Padala Manisha, CV Jawahar, and Sujit Gujar. Learning optimal redistribution mechanisms through neural networks. In Proceedings of the 17th International Conference on Autonomous Agents and MultiAgent Systems, pages 345–353. International Foundation for Autonomous Agents and Multiagent Systems, 2018. [24] Roger B Myerson. Optimal auction design. Mathematics of Operations Research, 6(1):58–73, 1981. [25] Noam Nisan. Bidding and allocation in combinatorial auctions. In Proceedings of the Second ACM Conference on Electronic Commerce, pages 1–12, 2000. [26] Noam Nisan and Amir Ronen. Algorithmic Mechanism Design. Games and Economic Behavior, 35(1-2):166–196, 2001. [27] David C Parkes. Iterative Combinatorial Auctions: Achieving Economic and Computational Efficiency. PhD thesis, University of Pennsylvania, 2001. [28] David C. Parkes and Michael P. Wellman. Economic reasoning and artificial intelligence. Science, 349(6245):267–272, 2015. [29] Alvin E Roth. The economist as engineer: Game theory, experimentation, and computation as tools for design economics. Econometrica, 70(4):1341–1378, 2002. [30] Tuomas Sandholm. Automated mechanism design: A new application area for search algorithms. In International Conference on Principles and Practice of Constraint Programming, pages 19–36. Springer, 2003. [31] Hal R Varian and Christopher Harris. The VCG auction in theory and practice. American Economic Review, 104(5):442–45, 2014. [32] William Vickrey. Counterspeculation, auctions, and competitive sealed tenders. The Journal of Finance, 16(1):8–37, 1961. [33] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhutdinov, and Alexander J Smola. Deep sets. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett, editors, Advances in Neural Information Processing Systems 30, pages 3391–3401. Curran Associates, Inc., 2017. 10
A Neural Architecture for Designing Truthful and Efficient Auctions Supplementary Material Andrea Tacchetti, DJ Strouse, Marta Garnelo, Thore Graepel and Yoram Bachrach DeepMind, UK {atacchet, strouse, garnelo, thore, yorambac}@google.com SM-1 Example of auction Here we provide a simple example of how the rules of an auction dictates the behavior of rational participants. Consider an auction with two participants, Alice and Bob, who are interested in buying a single item for sale: a burrito. Alice is hungry, so she would gladly pay up to $12. Bob just had breakfast, and he would not pay more than $6. Consider a mechanism that receives all agents’ bids, allocates the burrito to the highest bidder, and charges the amount that was bid to the receiver (and zero to the other bidder). Let’s assume that Bob decides to report truthfully that he values the burrito $6. What should Alice do? If she also tells the truth, she will end up paying $12 for her wrap, realizing a net utility of $0. However, Alice can improve her position by reporting anything between $6.01 and $11.99. This mechanism is not a truthful one, rational bidders will lie about their valuations, and consequently the mechanism might allocate items sub-optimally. Let’s modify the mechanism slightly: our new mechanism allocates the burrito to the highest bidder (like before), but it charges the receiver the amount bid by the other participant. It is easy to see that once Bob bids truthfully, for any report by Alice between $6.01 and $12.00 she will realize the same utility: $6. Moreover, if she decides to bid under $6, she risks losing the burrito to Bob, so she might as well bid her true valuation $12, to have the best chance of beating Bob’s bid (remember she does not know what Bob’s valuation actually is, nor what he might decide to report). The second mechanism is a special case of the VCG mechanism for a single item and two bidders. SM-2 Auction Simulators: Implementation details We evaluate our ideas on synthetic auction data-sets where valuations are sampled from reasonable distributions and are expressed in the appropriate bidding language. Here we give implementation details on the “auction simulators” used, including parameters for the valuation distributions we considered and implementation details of the allocation oracles required for the various bidding languages. SM-2.1 Details on the distributions Multi-unit auction with decreasing marginal utilities We start by sampling participants’ valua- tions: for each player i’s valuation, and for each individual object we sample v (k ) ρ, where k i m m is a “bundle” containing only object m1. When considering multi-unit auctions with n∼ on-decreasing marginal utilities, we let the 10 players bid for 15 objects and sort the per-object valuations indepen- dently by player (see Fig. 1 in the main text for an example). 1We assume objects are ordered absolutely so that all players agree on which exactly object m is. 9102 luJ 11 ]AM.sc[ 1v18150.7091:viXra
Heterogeneous objects with unit demand When dealing with auctions for heterogeneous objects and unit-demand, we again sample valuations independently for bidders and for single-object bundles from ρ, like before. We then let bidders have preferences over the 8 objects and use the v (k ) i m directly, since preferences are only expressed for each individual object. Hierarchical bundles When considering hierarchical bundles we let participants have preferences over 8 component objects objects (for a total of 15 bundles). We again started by sampling from ρ valuations for each player and for the 8 component object independently, just like we did for the two previous languages. We then construct valuations for bundles as follows: for each bundle v (k ), we i B let v (k ) = v (k ) δ (1 + (cid:15)), where v (k ) is player i’s valuation for receiving bundle i B l B i l · · i B B, δ 0, 1 is s∈ampled from a Bernoulli distribution with p = 0.2 and (cid:15) (0.1, 0.01), is a ∈ { }(cid:0)P (cid:1) ≈ N Gaussian distribution with the appropriate parameters, clipped at 0 from the left. Bundles are thus worth at least the sum of their component objects, and they have a 20% chance of being worth about 10% more. SM-2.2 Details on the allocation oracles Multi-unit auction with decreasing marginal utilities The allocation oracle for this case is im- plemented greedily. Agents essentially submit preferences in the form of their utility for receiving an additional item. We can then simply loop over the items, and assign each one to the participant with the largest outstanding unmatched utility. Heterogeneous objects with unit demand In this case, objects are assigned so that the sum total of utilities is maximized. This is exactly equivalent to a weighted bipartite matching on a graph with players on the left, objects on the right, and edges connecting all agents to all objects weighted by the utility of the assignment. Hierarchical bundles When considering hierarchical bundles, we place component objects at the leaves of a binary tree, and let users express their utility for obtaining either a leaf node, or any sub-tree. In this case we implement the allocation oracle as a linear program that maximizes the sum of realized utilities (by all players), with linear inequality constraints ensuring objects are not over-allocated (see Nisan et al. for further details [4]). SM-3 Additional results The primary performance metric for our learned mechanisms is the percent reduction in payments collected (budget) relative to the VCG mechanism. This can also be thought of as the percent of collected VCG payments (budget) returned to bidders. A performance of 100% means that the auction is strongly budget balanced and no net payments are collected by the auctioneer, an ideal but impossible goal to achieve consistently [1]. A performance below 100% means that some amount of payments are retained by the mechanism, and a performance above 100% represents a budget deficit. Thus, a well-performing mechanism will achieve as close to 100%, without going over, across many auctions. In the main text (see Fig. 2), we report the average fraction of the VCG budget returned, the percent of auctions with a budget balance violation, and the variance of these two quantities across seeds. Here, we provide a more fine-grained picture by reporting histograms of budgets across auctions. In addition to the two above metrics, these histograms allow us to read off the budget variance across auctions, as well as the magnitude of budget balance violations. To wit: 1) the average percent of the VCG budget returned to bidders is the average of the distributions plotted, 2) the percent of auctions with a budget balance violation is the integral of the distribution above 100%, 3) the variance of the budget across auctions is visible in the width of the distribution, and 4) the spread of the tail above 100% represents the magnitude of budget balance violations. In Figures S1 through S5, the three panels correspond to the three bidding languages we consider. Left: multi-unit auction with decreasing marginal utilities. Middle: Heterogeneous objects with unit demand. Right: hierarchical bundles. The y-axis represents the fraction of auctions (out of 2, 000, and for 5 seeds for each model) that resulted in the budget reported on the x-axis. The stacked histograms represent the different models, with the model names listed on the left. In Figures S1 SM-2
0 20 40 60 80 100 120 140 PLM-R NNC-R PLM-G NNC-G 0 20 40 60 80 100 120 140 0 20 40 60 80 100 120 140 Percentage of VCG budget returned Figure SM-1: ρ = ( (10.0, 1.0), (2.0, 0.5)). Train: n = 10. Test: n = 10. Left: multi-unit auction N N N with decreasing marginal utilities. Middle: Heterogeneous objects with unit demand. Right: hierarchical bundles. 0 20 40 60 80 100 120 140 PLM-R NNC-R PLM-G NNC-G 0 20 40 60 80 100 120 140 0 20 40 60 80 100 120 140 Percentage of VCG budget returned Figure SM-2: ρ = (10.0, 2.0). Train: n = 10. Test: n = 10. We speculate that the higher variance in N budgets across models is due to overfitting, which is diminished for the more varied hierarchical distribution of bidder preferences in the previous figure. Left: multi-unit auction with decreasing marginal utilities. Middle: Heterogeneous objects with unit demand. Right: hierarchical bundles. through S3, the number of bidders is fixed (n = 10) and only the distribution over bidder preferences, ρ, varies. Here, we consider models G-CNN and R-CNN (our network architecture and auction representation to learn a Groves payment rule, or a VCG redistribution, respectively); and G-MLP and R-MLP (Groves and redistribution mechanisms parameterized by a MLP, respectively). In Figures S4 and S5, the number of bidders varies, with training on n 9, 11 and testing on n = 10 for Figure ∈ { } S4, and training / testing on training on n 9, 10, 11 for Figure S5. The MLP models cannot ∈ { } handle variable numbers of bidders, so we only compare G-CNN and R-CNN. As for the distribution over bidder preferences, ρ, (a, b) represents a uniform distribution between a and b, while (µ, σ) U N represents a normal distribution with mean µ and standard deviation σ. The general trends we see are that: 1) the redistribution methods tend to result in larger budget reductions relative to VCG than do the Groves mechanisms. However, 2) the Groves mechanisms tend to better avoid budget balance violations, and thus the need for subsidies. 3) The redistribution mechanisms also tend to result in a lower variance in budget. Although it is easier to see in Fig. 2 in the main text than the plots here, 4) the CNN models avoid budget balance violations better than the MLP models. SM-4 Comparison with alternative methods SM-4.1 Comparison with Learning Optimal Redistribution Mechanisms Through Neural Networks, Manisha et al. 2018 Here we present a quantitative comparison with the recent work by Manisha et al. [3] (which we re-implemented). The authors also considered learning nonlinear mechanisms, restricted to the case of heterogeneous objects with unit demand. Their architecture was essentially an MLP mapping from bidder preferences to redistributed payments. We reproduce their model and compare to our set of models in Figure S6. Across bidder preference distributions, Manisha et al.’s model (purple) leads to significantly more budget balance violations. Note that unlike other figures in the Supplementary Material, the three panels correspond to various bidding languages, but rather SM-3
0 20 40 60 80 100 120 140 PLM-R NNC-R PLM-G NNC-G 0 20 40 60 80 100 120 140 0 20 40 60 80 100 120 140 Percentage of VCG budget returned Figure SM-3: ρ = (0.0, 1.0). Train: n = 10. Test: n = 10. Left: multi-unit auction with decreasing U marginal utilities. Middle: Heterogeneous objects with unit demand. Right: hierarchical bundles. 0 20 40 60 80 100 120 140 NNC-R NNC-G 0 20 40 60 80 100 120 140 0 20 40 60 80 100 120 140 Percentage of VCG budget returned Figure SM-4: ρ = ( (10.0, 1.0), (2.0, 0.5)). Train: n 9, 11 . Test: n = 10. Left: multi-unit N N N ∈ { } auction with decreasing marginal utilities. Middle: Heterogeneous objects with unit demand. Right: hierarchical bundles. to choices of valuation distributions; the bidding language is fixed to the only one considered by Manisha et al.: heterogeneous objects with unit-demand. SM-5 Comparison with Optimal-in-expectation redistribution mechanisms Guo and Conitzer. 2010 Here we present a quantitative comparison with the work by Guo and Conitzer [2]. The authors present a provably optimal-in-expectation linear VCG redistribution mechanism. This method can only be applied when the number of participants is greater than the number of objects; the authors only report quantitative results for the a 2-unit auction with either n = 3 or n = 7 participants. Here we report the reduction in VCG budget and fraction of auctions resulting in violations of the budget balance constraints. These results show how the methods we propose here are competitive with optimal linear redistribution methods in terms of budget reduction, and empirically result in virtually no budget balance violations. 0 20 40 60 80 100 120 140 NNC-R NNC-G 0 20 40 60 80 100 120 140 0 20 40 60 80 100 120 140 Percentage of VCG budget returned Figure SM-5: ρ = ( (10.0, 1.0), (2.0, 0.5)). Train: n 9, 10, 11 . Test: n 9, 10, 11 . The three N N N ∈ { } ∈ { } peaks in the distribution of budgets corresponds to the three possible numbers of bidders. Left: multi-unit auction with decreasing marginal utilities. Middle: Heterogeneous objects with unit demand. Right: hierarchical bundles. SM-4
0 20 40 60 80 100 120 140 AHSINAMPLM-R NNC-R PLM-G NNC-G 0 20 40 60 80 100 120 140 0 20 40 60 80 100 120 140 Percentage of VCG budget returned Figure SM-6: Left: ρ = ( (10.0, 1.0), (2.0, 0.5)). Middle: ρ = (10.0, 2.0), Right: ρ = N N N N (0.0, 1.0). n = 10. Bidding language: Heterogeneous objects with unit-demand. U R-CNN (ours) G-CNN (ours) Guo et al. [2] budget red. w/deficit budget red. w/deficit budget red. w/deficit n = 3 80 1% 0 0% 87 1% 0 1% 76 0% 0 0% ± ± ± ± ± ± n = 7 84 6% 0 0% 95 0% 0 1% 94 0% 0 0% ± ± ± ± ± ± Table 1: Quantitative comparison with Guo and Conitzer [2]. Our G-CNN method achieves competi- tive budget reductions, with no budget balance violations. Our R-CNN (non-linear) redistribution mechanism outperforms the budget reduction of the optimal linear case, at a cost of very few bud- get balance violation. Reported: average budget reduction and fraction of auctions resulting in a budget balance violation across 2, 000 auctions. Shown are mean and standard deviation across five model initialization seeds. Bidding language: Multi-unit auction with decreasing marginal utilities. ρ = (0.0, 1.0). U References [1] Jerry R. Green and Jean-Jacques Laffont. Incentives in Public Decision Making. North-Holland, Amsterdam, 1979. [2] Mingyu Guo and Vincent Conitzer. Optimal-in-expectation redistribution mechanisms. Artificial Intelligence, 174(5-6):363–381, 2010. [3] Padala Manisha, CV Jawahar, and Sujit Gujar. Learning optimal redistribution mechanisms through neural networks. In Proceedings of the 17th International Conference on Autonomous Agents and MultiAgent Systems, pages 345–353. International Foundation for Autonomous Agents and Multiagent Systems, 2018. [4] Noam Nisan. Bidding and allocation in combinatorial auctions. In Proceedings of the Second ACM Conference on Electronic Commerce, pages 1–12, 2000. SM-5
