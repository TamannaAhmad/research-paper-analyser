Preprint. A GENERALIZED TRAINING APPROACH FOR MULTIAGENT LEARNING Paul Muller Shayegan Omidshafiei Mark Rowland Karl Tuyls pmuller@... somidshafiei@... markrowland@... karltuyls@... Julien Perolat Siqi Liu Daniel Hennes Luke Marris perolat@... liusiqi@... hennes@... marris@... Marc Lanctot Edward Hughes Zhe Wang Guy Lever lanctot@... edwardhughes@... zhewang@... guylever@... Nicolas Heess Thore Graepel Remi Munos heess@... thore@... munos@... ...google.com. DeepMind. ABSTRACT This paper investigates a population-based training regime based on game-theoretic principles called Policy-Spaced Response Oracles (PSRO). PSRO is general in the sense that it (1) encompasses well-known algorithms such as fictitious play and double oracle as special cases, and (2) in principle applies to general-sum, many- player games. Despite this, prior studies of PSRO have been focused on two-player zero-sum games, a regime wherein Nash equilibria are tractably computable. In moving from two-player zero-sum games to more general settings, computation of Nash equilibria quickly becomes infeasible. Here, we extend the theoretical under- pinnings of PSRO by considering an alternative solution concept, α-Rank, which is unique (thus faces no equilibrium selection issues, unlike Nash) and tractable to compute in general-sum, many-player settings. We establish convergence guar- antees in several games classes, and identify links between Nash equilibria and α-Rank. We demonstrate the competitive performance of α-Rank-based PSRO against an exact Nash solver-based PSRO in 2-player Kuhn and Leduc Poker. We then go beyond the reach of prior PSRO applications by considering 3- to 5-player poker games, yielding instances where α-Rank achieves faster convergence than approximate Nash solvers, thus establishing it as a favorable general games solver. We also carry out an initial empirical validation in MuJoCo soccer, illustrating the feasibility of the proposed approach in another complex domain. 1 INTRODUCTION Creating agents that learn to interact in large-scale systems is a key challenge in artificial intelligence. Impressive results have been recently achieved in restricted settings (e.g., zero-sum, two-player games) using game-theoretic principles such as iterative best response computation (Lanctot et al., 2017), self-play (Silver et al., 2018), and evolution-based training (Jaderberg et al., 2019; Liu et al., 2019). A key principle underlying these approaches is to iteratively train a growing population of player policies, with population evolution informed by heuristic skill ratings (e.g., Elo (Elo, 1978)) or game-theoretic solution concepts such as Nash equilibria. A general application of this principle is embodied by the Policy-Space Response Oracles (PSRO) algorithm and its related extensions (Lanctot et al., 2017; Balduzzi et al., 2019). Given a game (e.g., poker), PSRO constructs a higher- level meta-game by simulating outcomes for all match-ups of a population of players’ policies. It then trains new policies for each player (via an oracle) against a distribution over the existing meta-game 1 9102 peS 72 ]AM.sc[ 1v32821.9091:viXra
Preprint. policies (typically an approximate Nash equilibrium, obtained via a meta-solver1), appends these new policies to the meta-game population, and iterates. In two-player zero sum games, fictitious play (Brown, 1951), double oracle (McMahan et al., 2003), and independent supervised learning can all be considered instances of PSRO, demonstrating its representative power (Lanctot et al., 2017). Prior applications of PSRO have used Nash equilibria as the policy-selection distribution (Lanctot et al., 2017; Balduzzi et al., 2019), which limits the scalability of PSRO to general games: Nash equilibria are intractable to compute in general (Daskalakis et al., 2009); computing approximate Nash equilibria is also intractable, even for some classes of two-player games (Daskalakis, 2013); finally, when they can be computed, Nash equilibria suffer from a selection problem (Harsanyi et al., 1988; Goldberg et al., 2013). It is, thus, evident that the reliance of PSRO on the Nash equilibrium as the driver of population growth is a key limitation, preventing its application to general games. Recent work has proposed a scalable alternative to the Nash equilibrium, called α-Rank, which is tractable even in general games (Omidshafiei et al., 2019), making it a promising candidate for population-based training. Given that the formal study of PSRO has only been conducted under the restricted settings determined by the limitations of Nash equilibria, establishing its theoretical and empirical behaviors under tractable meta-solvers remains an important and open research problem. We study several PSRO variants in the context of general-sum, many-player games, providing convergence guarantees in several classes of such games for PSRO instances that use α-Rank as a meta-solver. We also establish connections between Nash and α-Rank in specific classes of games, and identify links between α-Rank and the Projected Replicator Dynamics employed in prior PSRO instances (Lanctot et al., 2017). We develop a new notion of best response that guarantees convergence to the α-Rank distribution in several classes of games, verifying this empirically in randomly-generated general-sum games. We conduct empirical evaluations in Kuhn and Leduc Poker, first establishing our approach as a competitive alternative to Nash-based PSRO by focusing on two-player variants of these games that have been investigated in these prior works. We subsequently demonstrate empirical results extending beyond the reach of PSRO with Nash as a meta-solver by evaluating training in 3- to 5-player games. Finally, we conduct preliminary evaluations in MuJoCo soccer (Liu et al., 2019), another complex domain wherein we use supervised learning agents as oracles in our proposed PSRO variants, illustrating the feasibility of the approach. 2 PRELIMINARIES Games We consider K-player games, where each player k ∈ [K] has a finite set of pure strategies Sk. Let S = (cid:81) Sk denote the space of pure strategy profiles. Denote by S−k = (cid:81) Sl the set k l(cid:54)=k of pure strategy profiles excluding those of player k. Let M (s) = (M 1(s), . . . , M K(s)) ∈ RK denote the vector of expected player payoffs for each s ∈ S. A game is said to be zero-sum if (cid:80) M k(s) = 0 for all s ∈ S. A game is said to be symmetric if all players have identical strategy k sets Sk, and for any permutation ρ, strategy profile (s1, . . . , sK) ∈ S, and index k ∈ [K], one has M k(s1, . . . , sK) = M ρ(k)(sρ(1), . . . , sρ(K)). A mixed strategy profile is defined as π ∈ ∆ , a S tuple representing the probability distribution over pure strategy profiles s ∈ S. The expected payoff to player k under a mixed strategy profile π is given by M k(π) = (cid:80) π(s)M k(s). s∈S Nash Equilibrium (NE) Given a mixed profile π, the best response for a player k is de- fined BRk(π) = arg max [M k(ν, π−k)]. A factorized mixed profile π(s) = (cid:81) πk(sk) ν∈∆ Sk k is a Nash equilibrium (NE) if πk ∈ BRk(π) for all k ∈ [K]. Define NASHCONV(π) = (cid:80) M k(BRk(π), π−k) − M k(π); roughly speaking, this measures “distance” from an NE (Lanctot k et al., 2017). In prior PSRO instances (Lanctot et al., 2017), a variant of the replicator dynamics (Taylor and Jonker, 1978; Maynard Smith and Price, 1973), called the Projected Replicator Dynamics (PRD), has been used as an approximate Nash meta-solver (see Appendix F for details on PRD). α-Rank While NE exist in all finite games (Nash, 1950), their computation is intractable in general games, and their non-uniqueness leads to an equilibrium-selection problem (Harsanyi et al., 1988; Goldberg et al., 2013). This limits their applicability as the underlying driver of training beyond the two-player, zero-sum regime. Recently, an alternate solution concept called α-Rank was proposed by 1A meta-solver is a method that computes, or approximates, the solution concept that is being deployed. 2
Preprint. Randomly initialize player policy sets Player 1’s Player k’s Player K’s policy set policy set policy set Profile distribution ... ... ... ... Meta-solver Oracle Game simulations ... ... Profile distribution (a) Complete: compute missing (b) Solve: given the updated pay- (c) Expand: append a new policy payoff tensor M entries via game off tensor M , calculate meta- to each player’s policy space us- simulations. strategy π via meta-solver M. ing the oracle O. Figure 1: Overview of PSRO(M, O) algorithm phases. Omidshafiei et al. (2019), the key associated benefits being its uniqueness and tractable computation in many-player and general-sum games, making it a promising means for directing multiagent training. The α-Rank distribution is computed by constructing the response graph of the game: each strategy profile s ∈ S of the game is a node of this graph; a directed edge points from any profile s ∈ S to σ ∈ S in the graph if (1) s and σ differ in only a single player k’s strategy and (2) M k(σ) > M k(s). α-Rank constructs a random walk along this directed graph, perturbing the process by injecting a small probability of backwards-transitions from σ to s (dependent on a parameter, α, whose value is prescribed by the algorithm); this ensures irreducibility of the resulting Markov chain and the existence of a unique stationary distribution, π ∈ ∆ , called the α-Rank distribution. The masses S of π are supported by the sink strongly-connected components (SSCCs) of the response graph (Omidshafiei et al., 2019). For more details on α-Rank, see Appendix E and Rowland et al. (2019). Oracles We define an oracle O as an abstract computational entity that, given a game, computes policies with precise associated properties. For instance, a best-response oracle Ok(π) = BRk(π) computes the best-response policy for any player k, given a profile π. One may also consider approximate-best-response oracles that, e.g., use supervised learning to train a player k’s policy against a fixed distribution over the other players’ policies, π−k. Oracles play a key role in population- based training, as they compute the policies that are incrementally added to players’ growing policy populations (McMahan et al., 2003; Lanctot et al., 2017; Balduzzi et al., 2019). The choice of oracle O also affects the training convergence rate and final equilibrium reached (e.g., Nash or α-Rank). Empirical Game-theoretic Analysis PSRO relies on principles from empirical game-theoretic analysis (EGTA) (Walsh et al., 2002; Phelps et al., 2004; Wellman, 2006). Given a game (e.g., poker), EGTA operates via construction of a higher-level ‘meta-game’, where strategies s correspond to policies (e.g., ‘play defensively’ in poker) rather than atomic actions (e.g., ‘fold’). A meta-payoff table M is then constructed by simulating games for all joint policy combinations, with entries corresponding to the players’ expected utilities under these policies. Game-theoretic analysis can then be conducted on the meta-game in a manner analogous to the lower-level game, albeit in a much more scalable manner. As the theoretical discussion hereafter pertains to the meta-game, we use s, M , and π to respectively refer to policies, payoffs, and distributions at the meta-level, rather than the underlying low-level game. In our analysis, it will be important to distinguish between SSCCs of the underlying game, and of the meta-game constructed by PSRO; we refer to the latter as meta-SSCCs. 3 POLICY-SPACE RESPONSE ORACLES: NASH AND BEYOND We first overview Policy-Space Response Oracles (PSRO) prior to presenting our findings. Given an underlying game (e.g., Poker), PSRO first initializes the policy space S using randomly-generated policies, then expands the players’ policy populations in three iterated phases: complete, solve, and 3
Preprint. Algorithm 1 PSRO(M, O) 1: Initialize the players’ policy set S = (cid:81) Sk via random policies k 2: for iteration ∈ {1, 2, · · · } do 3: Update payoff tensor M for new policy profiles in S via game simulations (cid:46) (Fig. 1a) 4: Compute the meta-strategy π using meta-solver M(M ) (cid:46) (Fig. 1b) 5: Expand the policy space for each player k ∈ [K] via Sk ← Sk ∪ Ok(π) (cid:46) (Fig. 1c) Game type M O Converges to α-Rank? SP α-Rank BR (cid:55) (Example 1) SP α-Rank PBR (cid:51) (Sub-SSCC,† Proposition 3) MP α-Rank BR (cid:55) (Example 2) MP α-Rank PBR (cid:51) (With novelty-bound oracle,† Proposition 1) SP / MP Uniform or Nash BR (cid:55) (Examples 4 and 5, Appendix B.2) Table 1: Theory overview. SP and MP, resp., denote single and multi-population games. BR and PBR, resp., denote best response and preference-based best response. †Defined in the noted propositions. expand (see Algorithm 1 and Fig. 1). In the complete phase, a meta-game consisting of all match-ups of these joint policies is synthesized, with missing payoff entries in M completed through game simulations. Next, in the solve phase, a meta-solver M computes a profile π over the player policies (e.g., Nash, α-Rank, or uniform distributions). Finally, in the expand phase, an oracle O computes at least one new policy s(cid:48) for each player k ∈ [K], given profile π. As other players’ policy spaces k S−k and profile π−k are fixed, this phase involves solving a single-player optimization problem. The new policies are appended to the respective players’ policy sets, and the algorithm iterates. We use PSRO(M, O) to refer to the PSRO instance using meta-solver M and oracle O. Notably, PSRO-based training for two-player symmetric games can be conducted using a single population of policies that is shared by all players (i.e., Sk is identical for all k). Thus, we henceforth refer to two- player symmetric games as ‘single-population games’, and more generally refer to games that require player-specific policy populations as ‘multi-population games’. Recent investigations of PSRO have solely focused on Nash-based meta-solvers and best-response-based oracles (Lanctot et al., 2017; Balduzzi et al., 2019), with theory focused around the two-player zero-sum case. Unfortunately, these guarantees do not hold in games beyond this regime, making investigation of alternative meta-solvers and oracles critical for further establishing PSRO’s generalizability. 4 GENERALIZING PSRO THEORY This section establishes theoretical properties of PSRO for several useful classes of general games. We summarize our results in Table 1, giving a full exposition below. 4.1 ESTABLISHING CONVERGENCE TO α-RANK Player 2 A B C D X 1reyalP It is well-known that PSRO(Nash, BR) will eventually A 0 −φ 1 φ −ε return an NE in two-player zero-sum games (McMahan B φ 0 −φ2 1 −ε et al., 2003). In more general games, where Nash faces C −1 φ2 0 −φ −ε the issues outlined earlier, α-Rank appears a promis- D −φ −1 φ 0 −ε ing meta-solver candidate as it applies to many-player, X ε ε ε ε 0 general-sum games and has no selection problem. How- ever, open questions remain regarding convergence Table 2: Symmetric zero-sum game used to guarantees of PSRO when using α-Rank, and whether analyze the behavior of PSRO in Example 1. standard BR oracles suffice for ensuring these guaran- Here, 0 < ε (cid:28) 1 and φ (cid:29) 1. tees. We investigate these theoretical questions, namely, whether particular variants of PSRO can converge to the α-Rank distribution for the underlying game. A first attempt to establish convergence to α-Rank might involve running PSRO to convergence (until the oracle returns a strategy already in the convex hull of the known strategies), using α-Rank as the meta-solver, and a standard best response oracle. However, the following example shows that this will not work in general for the single-population case (see Fig. B.5 for a step-by-step illustration). 4
Preprint. Example 1. Consider the symmetric zero-sum game specified in Table 2. As X is the sole sink component of the game’s response graph (as illustrated in Fig. B.5a), the single-population α-Rank distribution for this game puts unit mass on X. We now show that a PSRO algorithm that computes best responses to the α-Rank distribution over the current strategy set need not recover strategy X, by computing directly the strategy sets of the algorithm initialized with the set {C}. 1. The initial strategy space consists only of the strategy C; the best response against C is D. 2. The α-Rank distribution over {C, D} puts all mass on D; the best response against D is A. 3. The α-Rank distribution over {C, D, A} puts all mass on A; the best response against A is B. 4. The α-Rank distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respec- tively. For φ sufficiently large, the payoff that C receives against B dominates all others, and since B has higher mass than C in the α-Rank distribution, the best response is C. Thus, PSRO(α-Rank, BR) leads to the algorithm terminating with strategy set {A, B, C, D} and not discovering strategy X in the sink strongly-connected component. This conclusion also holds in the multi-population case, as the following counterexample shows. Example 2. Consider the game in Table 2, treating it now as a multi-population problem. It is readily verified that the multi-population α-Rank distributions obtained by PSRO with initial strategy sets consisting solely of C for each player are: (i) a Dirac delta at the joint strategy (C, C), leading to best responses of D for both players; (ii) a Dirac delta at (D, D) leading to best responses of A for both players; (iii) a Dirac delta at (A, A), leading to best responses of B for both players; and finally (iv) a distribution over joint strategies of the 4×4 subgame induced by strategies A, B, C, D that leads to a best response not equal to X; thus, the full α-Rank distribution is again not recovered. 4.2 A NEW RESPONSE ORACLE The previous examples indicate that the use of standard best responses in PSRO may be the root cause of the incompatibility with the α-Rank solution concept. Thus, we define the Preference-based Best Response (PBR) oracle, which is more closely aligned with the dynamics defining α-Rank, and which enables us to establish desired PSRO guarantees with respect to α-Rank. Consider first the single-population case. Given an N -strategy population {s , . . . , s } and corre- 1 N sponding meta-solver distribution (π )N ∈ ∆ , a PBR oracle is defined as any function satisfying i i=1 N PBR(cid:0) (cid:80) π s (cid:1) ⊆ arg max (cid:80) π 1 (cid:2) M 1(σ, s ) > M 2(σ, s )(cid:3) , (1) i i i σ i i i i where the arg max returns the set of policies optimizing the objective, and the optimization is over pure strategies in the underlying game. The intuition for the definition of PBR is that we would like the oracle to return strategies that will receive high mass under α-Rank when added to the population; objective (1) essentially encodes the probability flux that the vertex corresponding to σ would receive in the random walk over the α-Rank response graph (see Section 2 or Appendix E for further details). We demonstrate below that the use of the PBR resolves the issue highlighted in Example 1 (see Fig. B.6 in Appendix B for an accompanying visual). Example 3. Steps 1 to 3 of correspond exactly to those of Example 1. In step 4, the α-Rank distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respectively. A beats C and D, thus its PBR score is 1/3. B beats A and D, thus its PBR score is 1/2. C beats B, its PBR score is thus 1/3. D beats C, its PBR score is thus 1/6. Finally, X beats every other strategy, and its PBR score is thus 1. Thus, there is only one strategy maximizing PBR, X, which is then chosen, thereby recovering the SSCC of the game and the correct α-Rank distribution at the next timestep. In the multi-population case, consider a population of N strategy profiles {s , . . . , s } and corre- 1 N sponding meta-solver distribution (π )N . Several meta-SSCCs may exist in the multi-population i i=1 α-Rank response graph. In this case, we run the PBR oracle for each meta-SSCC separately, as follows. Suppose there are (cid:96) meta-SSCCs, and denote by π((cid:96)) the distribution π restricted to the (cid:96)th meta-SSCC, for all 1 ≤ (cid:96) ≤ L. The PBR for player k on the (cid:96)th meta-SSCC is then defined by PBRk(cid:0) (cid:80) π((cid:96))s (cid:1) ⊆ arg max (cid:80) π((cid:96))1 (cid:2) M k(σ, s−k) > M k(sk, s−k)(cid:3) . (2) i i i σ i i i i i Thus, the PBR oracle generates one new strategy for each player for every meta-SSCC in the α-Rank response graph; we return this full set of strategies and append to the policy space accordingly, as 5
Preprint. in Line 5 of Algorithm 1. Intuitively, this leads to a diversification of strategies introduced by the oracle, as each new strategy need only perform well against a subset of prior strategies. This hints at interesting links with the recently-introduced concept of rectified-Nash BR (Balduzzi et al., 2019), which also attempts to improve diversity in PSRO, albeit only in two-player zero-sum games. We henceforth denote PSRO(α-Rank, PBR) as α-PSRO for brevity. We next define α-CONV, an approximate measure of convergence to α-Rank. We restrict discussion to the multi-population case here, describing the single-population case in Appendix B.4. With the notation introduced above, we define PBR-SCOREk(σ; π, S) = (cid:80) (cid:80) π((cid:96))1 (cid:2) M k(σ, s−k) > M k(sk, s−k)(cid:3) , and i (cid:96) i i i i α-CONV = (cid:80) k max σ PBR-SCOREk(σ) − max s∈Sk PBR-SCOREk(s) , where max is taken over the pure strategies of the underlying game. Unfortunately, in σ the multi-population case, a PBR-SCORE of 0 does not necessarily imply α-partial con- vergence. We thus introduce a further measure, PCS-SCORE, defined by PCS-SCORE = # of α-PSRO strategy profiles in the underlying game’s SSCCs , which assesses the quality of the α-PSRO population. # of α-PSRO strategy profiles in meta-SSCCs 4.3 α-PSRO: THEORY, PRACTICE, AND CONNECTIONS TO NASH We next study the theoretical properties of PSRO(α-Rank, PBR), which we henceforth refer to as α-PSRO for brevity. We consider that α-PSRO has converged if no new strategy has been returned by PBR for any player at the end of an iteration. Proofs of all results are provided in Appendix C. Definition 1. A PSRO algorithm is said to converge α-fully (resp., α-partially) to an SSCC of the underlying game if its strategy population contains the full SSCC (resp., a sub-cycle of the SSCC, denoted a ‘sub-SSCC’) after convergence. Definition 2. We also adapt PBR to be what we call novelty-bound by restricting the arg max in Equation (1) to be over strategies not already included in the population with PBR-SCORE > 0. In particular, the novelty-bound version of the PBR oracle is given by restricting the arg max appearing in (2) to only be over strategies not already present in the population. These definitions enable the following results for α-PSRO in the single- and multi-population cases. Proposition 1. If at any point the population of α-PSRO contains a member of an SSCC of the game, then α-PSRO will α-partially converge to that SSCC. Proposition 2. If we constrain the PBR oracle used in α-PSRO to be novelty-bound, then α-PSRO will α-fully converge to at least one SSCC of the game. Stronger guarantees exist for two-players symmetric (i.e., single-population) games, though the multi-population case encounters more issues, as follows. Proposition 3. (Single-population) α-PSRO converges α-partially to the unique SSCC. Proposition 4. (Multi-population) Without a novelty-bound oracle, there exist games for which α-PSRO does not converge α-partially to any SSCC. In Section 5, we further investigate convergence behavior beyond the conditions studied above. In practice, we demonstrate that despite the negative result of Proposition 4, α-PSRO does significantly increase the probability of converging to an SSCC, in contrast to PSRO(Nash, BR). Overall, we have shown that for general-sum multi-player games, it is possible to give theoretical guarantees for a version of PSRO driven by α-Rank in several circumstances. By contrast, using exact NE in PSRO is intractable in general. In prior work, this motivated the use of approximate Nash solvers generally based on the simulation of dynamical systems or regret minimization algorithms, both of which generally require specification of several hyperparameters (e.g., simulation iterations, window sizes for computing time-average policies, and entropy-injection rates), and a greater computational burden than α-Rank to carry out the simulation in the first place. Implementing the PBR Oracle Recall from Section 3 that the BR oracle inherently solves a single- player optimization problem, permitting use of a single-agent RL algorithm as a BR approximator, which is useful in practice. As noted in Section 4.1, however, there exist games where the BR and PBR objectives are seemingly incompatible, preventing the use of standard RL agents for PBR approximation. While exact PBR is computable in small-scale (e.g., normal-form) games, we next consider more general games classes where PBR can also be approximated using standard RL agents. 6
Preprint. : BR : PBR PCS-Score 0.95 PCS-Score (0.05, 0.95) PCS-Score 0.05 O O ≥ ∈ 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 Sk | | vnoC-α 0.8 0.6 0.4 0.2 0.0 10 15 20 25 30 Sk | | vnoC-α 1.0 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 Sk | | (a) α-CONV erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 15 20 25 30 Sk | | erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 Sk | | (b) PCS-SCORE for O = BR erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 15 20 25 30 Sk | | erocS-SCP (c) PCS-SCORE for O = PBR Figure 2: Oracle comparisons for randomly-generated games with varying player strategy space sizes |Sk|. Top and bottom rows, respectively, correspond to 4- and 5-player games. Definition 3. Objective A is ‘compatible’ with objective B if any solution to A is a solution to B. Proposition 5. A constant-sum game is denoted as win-loss if M k(s) ∈ {0, 1} for all k ∈ [K] and s ∈ S. BR is compatible with PBR in win-loss games in the two-player single-population case. Proposition 6. A symmetric two-player game is denoted monotonic if there exists a function f : S → R and a non-decreasing function σ : R → R such that M 1(s, ν) = σ(f (s) − f (ν)). BR is compatible with PBR in monotonic games in the single-population case. Finally, we next demonstrate that under certain conditions, there are strong connections between the PBR objective defined above and the broader field of preference-based RL (Wirth et al., 2017). Proposition 7. Consider symmetric win-loss games where outcomes between deterministic strategies are deterministic. A preference-based RL agent (i.e., an agent aiming to maximize its probability of winning against a distribution π of strategies {s , . . . , s }) optimizes exactly the PBR objective (1). 1 N Given this insight, we believe an important subject of future work will involve the use of preference- based RL algorithms in implementing the PBR oracle for more general classes of games. We conclude this section with some indicative results of the relationship between α-Rank and NE. Proposition 8. For symmetric two-player zero-sum games where off-diagonal payoffs have equal magnitude, all NE have support contained within that of the single-population α-Rank distribution. Proposition 9. In a symmetric two-player zero-sum game, there exists an NE with support contained within that of the α-Rank distribution. For more general games, the link between α-Rank and Nash equilibria will likely require a more complex description. We leave this for future work, providing additional discussion in Appendix B.3. 5 EVALUATION We conduct evaluations on games of increasing complexity, extending beyond prior PSRO applications that have focused on two-player zero-sum games. For experimental procedures, see Appendix D. Oracle comparisons We evaluate here the performance of the BR and PBR oracles in games where PBR can be exactly computed. We consider randomly generated, K-player, general-sum games with increasing strategy space sizes, |Sk|. Figure 2 reports these results for the 4- and 5-player instances (see Appendix D.3 for 2-3 player results). For each combination of K and |Sk|, we generate 1e6 random games. We conduct 10 trials per game, in each trial running the BR and PBR oracles starting from a random strategy in the corresponding response graph, then iteratively expanding the population space until convergence. Importantly, this implies that the starting strategy may not even be in an SSCC. As mentioned in Section 4.2, α-CONV and PCS-SCORE jointly characterize the oracle behaviors in these multi-population settings. Figure 2a plots α-CONV for both oracles, demonstrating that PBR outperforms BR in the sense that it captures more of the game SSCCs. Figures 2b and 2c, respectively, plot the PCS-SCORE for BR and PBR over all game instances. The PCS-SCORE here is typically either (a) greater than 95%, or (b) less than 5%, and otherwise rarely 7
Preprint. 0.6 0.5 0.4 0.3 0.2 0.1 0.0 100 101 102 Iteration vnoChsaN 9 78 α-Rank 56 Nash 34 PRD 12 Uniform 0 100 101 102 Iteration (a) Kuhn poker. (b) Leduc poker. Figure 3: Results for 2-player poker domains. 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0.0 100 101 Iteration vnoChsaN 1.6 2.0 14 1.4 12 1.2 1.5 10 α-Rank 001 ... 680 1.0 68 PRD 0.4 0.5 4 Uniform 0.2 2 0.0 0.0 0 100 101 100 101 100 101 Iteration Iteration Iteration (a) 3-player Kuhn. (b) 4-player Kuhn. (c) 5-player Kuhn. (d) 3-player Leduc. Figure 4: Results for poker domains with more than 2 players. between 5% to 95%. For all values of |Sk|, PBR consistently discovers a larger proportion of the α-Rank support in contrast to BR, serving as useful validation of the theoretical results of Section 4.3. Meta-solver comparisons We consider next the standard benchmarks of Kuhn and Leduc poker (Kuhn, 1950; Southey et al., 2005; Lanctot et al., 2019). We detail these domains in Appendix D.2, noting here that both are K-player, although Leduc is significantly more complex than Kuhn. We first consider two-player instances of Kuhn and Leduc poker, permitting use of an exact Nash meta-solver. Figure 3 compares the NASHCONV of PSRO(M, BR) for various meta-solver M choices. In Kuhn poker (Fig. 3a), the α-Rank, Nash, and the Projected Replicator Dynamics (PRD) meta-solvers converge essentially at the same rate towards zero NASHCONV, in contrast to the slower rate of the Uniform meta-solver. As noted in Lanctot et al. (2017), PSRO(Uniform, BR) corresponds to Fictitious Play (Brown, 1951) and is thus guaranteed to find an NE in such instances of two-player zero-sum games. Its slower convergence rate is explained by the assignment of uniform mass across all policies s ∈ S, implying that PSRO essentially wastes resources on training the oracle to beat even poor-performing strategies. Notably, the similar performance of α-Rank and Nash serves as empirical evidence that α-Rank can be applied competitively even in the two-player zero-sum setting, while also showing great promise to be deployed in broader settings where Nash is no longer tractable. We next consider significantly larger variants of Kuhn and Leduc Poker involving more than two players, extending beyond the reach of prior PSRO results (Lanctot et al., 2017). Figure 4 visualizes the NASHCONV of PSRO using the various meta-solvers (with the exception of an exact Nash solver, due to its intractability in these instances). In all instances of Kuhn Poker, α-Rank and PRD show competitive convergence rates. In 3-player Leduc poker, however, α-Rank shows fastest convergence, with Uniform following throughout most of training and PRD eventually reaching a similar NASHCONV. Several key insights can be made here. First, computation of an approximate Nash via PRD involves simulation of the associated replicator dynamics, which can be chaotic (Palaiopanos et al., 2017) even in two-player two-strategy games, making it challenging to determine when PRD has suitably converged. Second, the addition of the projection step in PRD severs its connection with NE; the theoretical properties of PRD were left open in Lanctot et al. (2017), leaving it without any guarantees. These limitations go beyond theoretical, manifesting in practice, e.g., in Fig. 4d, where PRD is outperformed by even the uniform meta-solver for many iterations. Given these issues, we take a first (and informal) step towards analyzing PRD in Appendix F. For α-Rank, by contrast, we both establish theoretical properties in Section 4, and face no simulation-related challenges as its computation involves solving of a linear system, even in the general-sum many-player case (Omidshafiei et al., 2019), thus establishing it as a favorable and general PSRO meta-solver. MuJoCo Soccer While the key objective of this paper is to take a first step in establishing a theoretically-grounded framework for PSRO-based training of agents in many-player settings, an exciting question regards the behaviors of the proposed α-Rank-based PSRO algorithm in complex domains where function-approximation-based policies need to be relied upon. In Appendix G, we take a first step towards conducting this investigation in the MuJoCo soccer domain introduced in Liu et al. (2019). We remark that these results, albeit interesting, are primarily intended to lay the 8
Preprint. foundation for use of α-Rank as a meta-solver in complex many agent domains where RL agents serve as useful oracles, warranting additional research and analysis to make conclusive insights. 6 DISCUSSION This paper studied variants of PSRO using α-Rank as a meta-solver, which were shown to be competitive with Nash-based PSRO in zero-sum games, and scale effortlessly to general-sum many- player games, in contrast to Nash-based PSRO. We believe there are many interesting directions for future work, including how uncertainty in the meta-solver distribution, informed by recent developments in dealing with incomplete information in games (Reeves and Wellman, 2004; Walsh et al., 2003; Rowland et al., 2019), can be used to inform the selection of new strategies to be added to populations. In summary, we strongly believe that the theoretical and empirical results established in this paper will play a key role in scaling up multiagent training in general settings. REFERENCES David Balduzzi, Marta Garnelo, Yoram Bachrach, Wojciech Czarnecki, Julien Pe´rolat, Max Jader- berg, and Thore Graepel. Open-ended learning in symmetric zero-sum games. In International Conference on Machine Learning (ICML), 2019. Daan Bloembergen, Karl Tuyls, Daniel Hennes, and Michael Kaisers. Evolutionary dynamics of multi-agent learning: A survey. J. Artif. Intell. Res. (JAIR), 53:659–697, 2015. George W Brown. Iterative solution of games by fictitious play. Activity Analysis of Production and Allocation, 13(1):374–376, 1951. Ross Cressman and Yi Tao. The replicator equation and other game dynamics. Proceedings of the National Academy of Sciences USA, 111:10810–10817, 2014. Constantinos Daskalakis. On the complexity of approximating a Nash equilibrium. ACM Transactions on Algorithms, 9(3):23, 2013. Constantinos Daskalakis, Paul W Goldberg, and Christos H Papadimitriou. The complexity of computing a Nash equilibrium. SIAM Journal on Computing, 39(1):195–259, 2009. Arpad E Elo. The rating of chessplayers, past and present. Arco Pub., 1978. Jakob Foerster, Ioannis Alexandros Assael, Nando de Freitas, and Shimon Whiteson. Learning to communicate with deep multi-agent supervised learning. In Advances in Neural Information Processing Systems (NIPS), 2016. Jakob N Foerster, Gregory Farquhar, Triantafyllos Afouras, Nantas Nardelli, and Shimon Whiteson. Counterfactual multi-agent policy gradients. In AAAI Conference on Artificial Intelligence, 2018. Paul W Goldberg, Christos H Papadimitriou, and Rahul Savani. The complexity of the homotopy method, equilibrium selection, and Lemke-Howson solutions. ACM Transactions on Economics and Computation, 1(2):9, 2013. John C Harsanyi, Reinhard Selten, et al. A general theory of equilibrium selection in games. MIT Press Books, 1, 1988. Daniel Hennes, Daniel Claes, and Karl Tuyls. Evolutionary advantage of reciprocity in collision avoidance. In AAMAS Workshop on Autonomous Robots and Multirobot Systems (ARMS), 2013. Max Jaderberg, Wojciech M. Czarnecki, Iain Dunning, Luke Marris, Guy Lever, Antonio Garcia Castan˜eda, Charles Beattie, Neil C. Rabinowitz, Ari S. Morcos, Avraham Ruderman, Nico- las Sonnerat, Tim Green, Louise Deason, Joel Z. Leibo, David Silver, Demis Hassabis, Koray Kavukcuoglu, and Thore Graepel. Human-level performance in 3D multiplayer games with population-based supervised learning. Science, 364(6443):859–865, 2019. Harold W Kuhn. A simplified two-person poker. Contributions to the Theory of Games, 1:97–103, 1950. 9
Preprint. Marc Lanctot, Vinicius Zambaldi, Audrunas Gruslys, Angeliki Lazaridou, Karl Tuyls, Julien Pe´rolat, David Silver, and Thore Graepel. A unified game-theoretic approach to multiagent supervised learning. In Neural Information Processing Systems (NIPS), 2017. Marc Lanctot, Edward Lockhart, Jean-Baptiste Lespiau, Vinicius Zambaldi, Satyaki Upadhyay, Julien Pe´rolat, Sriram Srinivasan, Finbarr Timbers, Karl Tuyls, Shayegan Omidshafiei, Daniel Hennes, Dustin Morrill, Paul Muller, Timo Ewalds, Ryan Faulkner, Ja´nos Krama´r, Bart De Vylder, Brennan Saeta, James Bradbury, David Ding, Sebastian Borgeaud, Matthew Lai, Julian Schrit- twieser, Thomas Anthony, Edward Hughes, Ivo Danihelka, and Jonah Ryan-Davis. OpenSpiel: A framework for supervised learning in games. arXiv preprint arXiv:1908.09453, 2019. Siqi Liu, Guy Lever, Josh Merel, Saran Tunyasuvunakool, Nicolas Heess, and Thore Graepel. Emer- gent coordination through competition. In International Conference on Learning Representations (ICLR), 2019. Ryan Lowe, Yi Wu, Aviv Tamar, Jean Harb, Pieter Abbeel, and Igor Mordatch. Multi-agent actor-critic for mixed cooperative-competitive environments. In Advances in Neural Information Processing Systems (NIPS), 2017. Laetitia Matignon, Guillaume J. Laurent, and Nadine Le Fort-Piat. Independent reinforcement learners in cooperative Markov games: A survey regarding coordination problems. The Knowledge Engineering Review, 27(1):1–31, 2012. J. Maynard Smith and G. R. Price. The logic of animal conflicts. Nature, 246:15–18, 1973. H. Brendan McMahan, Geoffrey J. Gordon, and Avrim Blum. Planning in the presence of cost functions controlled by an adversary. In International Conference on Machine Learning (ICML), 2003. Anna Nagurney and Ding Zhang. Projected dynamical systems and variational inequalities with applications, volume 2. Springer Science & Business Media, 2012. John F Nash. Equilibrium points in n-person games. Proceedings of the National Academy of Sciences, 36(1):48–49, 1950. Shayegan Omidshafiei, Jason Pazis, Christopher Amato, Jonathan P. How, and John Vian. Deep decen- tralized multi-task multi-agent supervised learning under partial observability. In International Conference on Machine Learning (ICML), 2017. Shayegan Omidshafiei, Christos Papadimitriou, Georgios Piliouras, Karl Tuyls, Mark Rowland, Jean-Baptiste Lespiau, Wojciech M Czarnecki, Marc Lanctot, Julien Perolat, and Re´mi Munos. α-Rank: Multi-agent evaluation by evolution. Scientific Reports, 9, 2019. Gerasimos Palaiopanos, Ioannis Panageas, and Georgios Piliouras. Multiplicative weights update with constant step-size in congestion games: Convergence, limit cycles and chaos. In Neural Information Processing Systems (NIPS), 2017. Gregory Palmer, Karl Tuyls, Daan Bloembergen, and Rahul Savani. Lenient multi-agent deep supervised learning. In Autonomous Agents and Multiagent Systems (AAMAS), 2018. Steve Phelps, Simon Parsons, and Peter McBurney. An evolutionary game-theoretic comparison of two double-auction market designs. In AAMAS Workshop on Agent-Mediated Electronic Commerce, 2004. Daniel M Reeves and Michael P Wellman. Computing best-response strategies in infinite games of incomplete information. In Uncertainty in Artificial Intelligence (UAI), 2004. Julia Robinson. An iterative method of solving a game. Annals of Mathematics, 54(2):296–301, 1951. Mark Rowland, Shayegan Omidshafiei, Karl Tuyls, Julien Perolat, Michal Valko, Georgios Piliouras, and Remi Munos. Multiagent evaluation under incomplete information. To appear in Neural Information Processing Systems (NeurIPS), 2019. 10
Preprint. Peter Schuster and Karl Sigmund. Replicator dynamics. Journal of Theoretical Biology, 100(3): 533–538, 1983. David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy Lillicrap, Karen Simonyan, and Demis Hassabis. A general supervised learning algorithm that masters chess, shogi, and Go through self-play. Science, 362(6419):1140–1144, 2018. Finnegan Southey, Michael Bowling, Bryce Larson, Carmelo Piccione, Neil Burch, Darse Billings, and Chris Rayner. Bayes’ bluff: Opponent modelling in poker. In Uncertainty in Artificial Intelligence (UAI), 2005. Peter D Taylor and Leo B Jonker. Evolutionary stable strategies and game dynamics. Mathematical Biosciences, 40(1-2):145–156, 1978. Karl Tuyls and Simon Parsons. What evolutionary game theory tells us about multiagent learning. Artif. Intell., 171(7):406–416, 2007. Karl Tuyls, Julien Perolat, Marc Lanctot, Joel Z Leibo, and Thore Graepel. A generalised method for empirical game theoretic analysis. In Autonomous Agents and Multiagent Systems (AAMAS), 2018. Yevgeniy Vorobeychik. Probabilistic analysis of simulation-based games. ACM Trans. Model. Comput. Simul., 20(3):16:1–16:25, October 2010. William E Walsh, Rajarshi Das, Gerald Tesauro, and Jeffrey O Kephart. Analyzing complex strategic interactions in multi-agent systems. In AAAI Workshop on Game-Theoretic and Decision-Theoretic Agents, 2002. William E Walsh, David C Parkes, and Rajarshi Das. Choosing samples to compute heuristic-strategy Nash equilibrium. In International Workshop on Agent-Mediated Electronic Commerce, pages 109–123. Springer, 2003. Michael P Wellman. Methods for empirical game-theoretic analysis. In AAAI Conference on Artificial Intelligence, 2006. Bryce Wiedenbeck and Michael P. Wellman. Scaling simulation-based game analysis through deviation-preserving reduction. In Autonomous Agents and Multiagent Systems (AAMAS), 2012. Bryce Wiedenbeck, Ben-Alexander Cassell, and Michael P. Wellman. Bootstrap statistics for empirical games. In Autonomous Agents and MultiAgent Systems (AAMAS), pages 597–604, 2014. Christian Wirth, Riad Akrour, Gerhard Neumann, and Johannes Fu¨rnkranz. A survey of preference- based supervised learning methods. The Journal of Machine Learning Research, 18(1):4945– 4990, 2017. 11
Preprint. APPENDICES A MOST CLOSELY RELATED WORK We discuss the most closely related work along two axes. We start with PSRO-based research and some multiagent deep RL work that focuses on training of networks in various multiagent settings. Then we continue with related work that uses evolutionary dynamics (α-Rank and replicator dynamics) as a solution concept to examine underlying behavior of multiagent interactions using meta-games. Policy-space response oracles (Lanctot et al., 2017) unify many existing approaches to multiagent learning. Notable examples include fictitious play (Brown, 1951; Robinson, 1951), independent supervised learning (Matignon et al., 2012) and the double oracle algorithm (McMahan et al., 2003). PSRO also relies, fundamentally, on principles from empirical game-theoretic analysis (EGTA) (Walsh et al., 2002; Phelps et al., 2004; Tuyls et al., 2018; Wellman, 2006; Vorobeychik, 2010; Wiedenbeck and Wellman, 2012; Wiedenbeck et al., 2014). PSRO allows the multiagent learning problem to be decomposed into a sequence of single-agent learning problems. A wide variety of other approaches that deal with the multiagent learning problem without this reduction are also available, such as Multiagent Deep Deterministic Policy Gradients (MADDPG) (Lowe et al., 2017), Counterfactual Multiagent Policy Gradients (COMA) (Foerster et al., 2018), Differentiable Inter-Agent Learning (DIAL) (Foerster et al., 2016), Hysteretic Deep Recurrent Q-learning (Omidshafiei et al., 2017), and lenient Multiagent Deep supervised learning (Palmer et al., 2018). α-Rank was introduced by Omidshafiei et al. (2019) as a scalable dynamic alternative to Nash equilibria that can be applied in general-sum, many-player games and is capable of capturing the underlying multiagent evolutionary dynamics. Concepts from evolutionary dynamics have long been used in analysis of multiagent interactions from a meta-game standpoint (Walsh et al., 2002; Tuyls and Parsons, 2007; Hennes et al., 2013; Bloembergen et al., 2015; Tuyls et al., 2018). 12
Preprint. B EXAMPLES B.1 FURTHER EXPOSITION OF EXAMPLES 1 AND 2 Player 2 A B C D X A 0 −φ 1 φ −ε B φ 0 −φ2 1 −ε Player 1 C −1 φ2 0 −φ −ε D −φ −1 φ 0 −ε X ε ε ε ε 0 (a) Overview. Full payoff table on left, full response graph on right, with values over directed edges indicating the payoff gained by deviating from one strategy to another. Player 2 A B C D X A 0 −φ 1 φ −ε B φ 0 −φ2 1 −ε Player 1 C −1 φ2 0 −φ −ε D −φ −1 φφφ 0 −ε X ε ε ε ε 0 (b) Consider an initial strategy space consisting only of the strategy C; the best response against C is D. Player 2 A B C D X A 0 −φ 1 φφφ −ε B φ 0 −φ2 1 −ε Player 1 C −1 φ2 0 −φ −ε D −φ −1 φ 0 −ε X ε ε ε ε 0 (c) The α-Rank distribution over {C, D} puts all mass on D; the best response against D is A. Player 2 A B C D X A 0 −φ 1 φ −ε B φφφ 0 −φ2 1 −ε Player 1 C −1 φ2 0 −φ −ε D −φ −1 φ 0 −ε X ε ε ε ε 0 (d) The α-Rank distribution over {C, D, A} puts all mass on A; the best response against A is B. Player 2 A B C D X A 0 −φ 1 φ −ε B φ 0 −φ2 1 −ε Player 1 C −1 φφφ222 0 −φ −ε D −φ −1 φ 0 −ε X ε ε ε ε 0 (e) The α-Rank distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respectively. For φ sufficiently large, the payoff that C receives against B dominates all others, and since B has higher mass than C in the α-Rank distribution, the best response is C. Figure B.5: Example 1 with oracle O = BR. In each step above, the α-Rank support is highlighted by the light green box of the payoff table, and the BR strategy against it in bold, dark green. 13
Preprint. Player 2 A B C D X A 0 −φ 1 φ −ε B φ 0 −φ2 1 −ε Player 1 C −1 φ2 0 −φ −ε D −φ −1 φ 0 −ε X εεε εεε εεε εεε 0 (e) The α-Rank distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respectively. A beats C and D, and therefore its PBR score is 1/3. B beats A and D, therefore its PBR score is 1/2. C beats B, its PBR score is therefore 1/3. D beats C, its PBR score is therefore 1/6. Finally, X beats every other strategy, and its PBR score is thus 1. There is only one strategy maximizing PBR, X, which is then chosen, and the SSCC of the game, recovered. Figure B.6: Example 1 with oracle O = PBR. Steps (a) to (d) are not shown as they are identical to their analogs in Fig. B.5. B.2 EXAMPLE BEHAVIOR OF PSRO(NASH, BR) A first attempt to establish convergence to α-Rank might involve running PSRO to convergence (until the oracle returns a strategy already in the convex hull of the known strategies), and then running α-Rank on the resulting meta-game. However, the following provides a counterexample to this approach when using either PSRO(Nash, BR) or PSRO(Uniform, BR). Player 2 Player 2 A B X A B A 0 1 ε A -1 1 Player 1 B 1 0 −ε Player 1 B 1 -1 X −ε ε 0 X −ε −ε/2 (a) Example 4 (b) Example 5 Table 3: Illustrative games used to analyze the behavior of PSRO in Example 4. Here, 0 < ε (cid:28) 1. The first game is symmetric, whilst the second is zero-sum. Both tables specify the payoff to Player 1 under each strategy profile. Example 4. Consider the two-player symmetric game specified in Table 3a. The sink strongly- connected component of the single-population response graph (and hence the α-Rank distribution) contains all three strategies, but all NE are supported on {A, B} only, and the best response to a strategy supported on {A, B} is another strategy supported on {A, B}. Thus, the single-population variant of PSRO, using M ∈ {Nash, Uniform} with initial strategies contained in {A, B} will terminate before discovering strategy X; the full α-Rank distribution will thus not be recovered. Example 5. Consider the two-player zero-sum game specified in Table 3b. All strategy profiles recieve non-zero probability in the multi-population α-Rank distribution. However, the Nash equilibrium over the game restricted to actions A, B for each player has a unique Nash equilibrium of (1/2, 1/2). Player 1’s best response to this Nash is to play some mixture of A and B, and therefore strategy X is not recovered by PSRO(Nash, BR) in this case, and so the full α-Rank distribution will thus not be recovered. B.3 COUNTEREXAMPLES: α-RANK VS. NASH SUPPORT The Game of Chicken The Game of Chicken provides an example where the support of α-Rank- in the multipopulation case - does not include the full support of Nash Equilibria. This game has three Nash equilibria: Two pure, (D,C) and (C,D), and one mixed, where the population plays Dare with probability 1 . Nevertheless, α-rank only puts weight on (C,D) and (D,C), effectively 3 not putting weight on the full mixed-nash support. 14
Preprint. Player 2 D C D (0, 0) (7, 2) Player 1 C (2, 7) (6, 6) Table 4: Game of Chicken payoff table Prisoner’s Dilemma The Prisoner’s Dilemma provides a counterexample that the support of α- Rank- in the multi-population case - does not include the full support of correlated equilibria. Player 2 D C D (0, 0) (3, −1) Player 1 C (−1, 3) (2, 2) Table 5: Prisoner’s Dilemma payoff table This game has correlated equilibria that include (C,D), (D,C) and (C,C) in their support; nevertheless, α-Rank only puts weight on (D,D), effectively being fully disjoint from the support of the correlated equilibria. B.4 SINGLE-POPULATION α-CONV In analogy with the multi-population definition in Section 4.2, we define a single-population ver- sion of α-CONV. We start by defining the single-population version of PBR-Score, given by PBR-SCORE(σ; π, S) = (cid:80) i π i1 (cid:2) M 1(σ, s i) > M 2(σ i, s i)(cid:3) . The single-population α-CONV is then defined as α-CONV = max PBR-SCORE(σ) − max PBR-SCORE(s) , σ s∈S where max is taken over the pure strategies of the underlying game. σ 15
Preprint. C PROOFS C.1 PROOF OF PROPOSITION 1 Proposition 1. If at any point the population of α-PSRO contains a member of an SSCC of the game, then α-PSRO will α-partially converge to that SSCC. Proof. Suppose that a member of one of the underlying game’s SSCCs appears in the α-PSRO population. This member will induce its own meta-SSCC in the meta-game’s response graph. At least one of the members of the underlying game’s corresponding SSCC will thus always have positive probability under the α-Rank distribution for the meta-game, and the PBR oracle for this meta-SSCC will always return a member of the underlying game’s SSCC. If the PBR oracle returns a member of the underlying SSCC already in the PSRO population, we claim that the corresponding meta-SSCC already contains a cycle of the underlying SSCC. To see this, note that if the meta-SSCC does not contain a cycle, it must be a singleton. Either this singleton is equal to the full SSCC of the underlying game (in which we have α-fully converged), or it is not, in which case the PBR oracle must return a new strategy from the underlying SSCC, contradicting our assumption that it has terminated. C.2 PROOF OF PROPOSITION 2 Proposition 2. If we constrain the PBR oracle used in α-PSRO to be novelty-bound, then α-PSRO will α-fully converge to at least one SSCC of the game. Proof. Suppose that α-PSRO has converged, and consider a meta-SSCC. Since α-PSRO has con- verged, it follows that each strategy profile of the meta-SSCC is an element of an SSCC of the underlying game. Any strategy profile in this SSCC which is not in the meta-SSCC will obtain a positive value for the PBR objective, and since α-PSRO has converged, there can be no such strategy profile. Thus, the meta-SSCC contains every strategy profile contained within the corresponding SSCC of the underlying game, and therefore conclude that α-PSRO α-fully converges to an SSCC of the underlying game. C.3 PROOF OF PROPOSITION 3 Proposition 3. (Single-population) α-PSRO converges α-partially to the unique SSCC. Proof. The uniqueness of the SSCC follows from the fact that in the single-population case, the response graph is fully-connected. Suppose at termination of α-PSRO, the α-PSRO population contains no strategy within the SSCC, and let s be a strategy in the SSCC. We claim that s attains a higher value for the objective defining the PBR oracle than any strategy in the α-PSRO population, which contradicts the fact that α-PSRO has terminated. To complete this argument, we note that by virtue of s being in the SSCC, we have M 1(s, s(cid:48)) > M 1(s(cid:48), s) for all s(cid:48) outside the SSCC, and in particular for all s(cid:48) ∈ S, thus the PBR objective for s is 1. In contrast, for any s ∈ S, the PBR i objective for s is upper-bounded by 1 − π . If π > 0, then this shows s is not selected by the oracle, i i i i since the objective value is lower than that of s. If π = 0, then the objective value for s is 0, and so i i an SSCC member will always have a maximal PBR score of 1 against a population not composed of any SSCC member, and all members of that population have < 1 PBR scores. Consequently, single- population α-PSRO cannot terminate before it has encountered an SSCC member. By Proposition 1, the proposition is therefore proven. C.4 PROOF OF PROPOSITION 4 Proposition 4. (Multi-population) Without a novelty-bound oracle, there exist games for which α-PSRO does not converge α-partially to any SSCC. Proof. We exhibit a specific counterexample to the claim. Consider the three-player, three-strategy game with response graph illustrated in Fig. C.7; note that we do not enumerate all strategy profiles not appearing in the SSCC for space and clarity reasons. The sequence of updates undertaken by α-PSRO in this game is illustrated in Fig. C.7a; whilst the singleton strategy profile (3, 2, 3) forms 16
Preprint. the unique SSCC for this game, α-PSRO terminates before reaching it, which concludes the proof. The steps taken by the algorithm are described below; again, we do not enumerate all strategy profiles not appearing in the SSCC for space and clarity reasons. 1. Begin with strategies [[2], [1], [1]] in the α-PSRO population (Player 1 only has access to strategy 2, Players 2 and 3 only have access to strategy 1) 2. The PBR to (2,1,1) for player 2 is 2, and no other player has a PBR on this round. We add 2 to the strategy space of player 2, which changes the space of available joint strategies to [(2, 1, 1), (2, 2, 1)]. 3. α-Rank puts all its mass on (2,2,1). The PBR to (2,2,1) for player 3 is 2, and no other player has a PBR on this round. We add strategy 2 to player 3’s strategy space, which changes the space of available joint strategies to [(2, 1, 1), (2, 2, 1), (2, 2, 2)]. 4. α-Rank puts all its mass on (2,2,2). The PBR to (2,2,2) for player 1 is 1, and no other player has a PBR on this round. We add strategy 1 to player 1’s strategy space, which changes the space of available joint strategies to [(1, 1, 1), (1, 2, 1), (1, 2, 2), (2, 1, 1), (2, 2, 1), (2, 2, 2)]. 5. Define σ as the α-Rank probabilities of the meta-game. Player 1 playing strategy 2 has a PBR score of σ((1, 1, 1)) + σ((1, 2, 1)), and the same player playing strategy 3 has a PBR score of σ((1, 2, 1)), which is lower than the PBR Score of playing strategy 2. No other player has a valid PBR for this round, and therefore, α-PSRO terminates. C.5 PROOF OF PROPOSITION 5 Proposition 5. A constant-sum game is denoted as win-loss if M k(s) ∈ {0, 1} for all k ∈ [K] and s ∈ S. BR is compatible with PBR in win-loss games in the two-player single-population case. Proof. We manipulate the best-response objective as follows: (cid:88) M 1(ν, π) = π(s)M 1(ν, s) s∈S (cid:88) = π(s)1[M 1(ν, s) > M 2(ν, s)] . s∈S Noting that the final line is the single-population PBR objective, we are done. C.6 PROOF OF PROPOSITION 6 Proposition 6. A symmetric two-player game is denoted monotonic if there exists a function f : S → R and a non-decreasing function σ : R → R such that M 1(s, ν) = σ(f (s) − f (ν)). BR is compatible with PBR in monotonic games in the single-population case. Proof. Rewriting the objectives given that the game is monotonic, we have that the value-based objective becomes K K (cid:88) (cid:88) π M 1(s, s ) = π σ(f (s) − f (s )) . k k k k k=1 k=1 Given the fact that the only condition we have on σ is its non-decreasing character, this objective does not reduce to maximizing f (s) in the general case. The objective for PBR is K K (cid:88) (cid:88) π 1[M 1(s, s ) > M 2(s, s )] = π 1[σ(f (s) − f (s )) > σ(f (s ) − f (s))] k k k k k k k=1 k=1 Since σ is non-decreasing, σ(f (s) − f (s )) > σ(f (s ) − f (s)) ⇒ f (s) > f (s ) k k k 17
Preprint. 3,2,3 20,20,20 3,2,1 1,1,1 4,3,3 2,2,2 1,2,1 1,1,2 3,3,3 1,5,1 2,1,1 2,1,1 3,3,3 3,3,3 2,2,1 1,2,2 10,10,1 5,1,5 2,2,2 1,1,5 (a) (b) 2,1,1 2,1,1 3,3,3 3,3,3 2,2,1 2,2,1 10,10,1 10,10,1 2,2,2 1,1,5 (c) (d) 1,1,1 2,2,2 1,2,1 1,1,2 3,3,3 1,5,1 2,1,1 2,1,1 3,3,3 3,3,3 2,2,1 1,2,2 2,2,1 1,2,2 10,10,1 5,1,5 10,10,1 5,1,5 2,2,2 2,2,2 1,1,5 1,1,5 (e) (f) Figure C.7: The three-player, three-strategy game serving as a counterexample in the proof of Proposition 4. Strategy profiles are illustrated by gray circles, with payoffs listed beneath. All strategy profiles not pictured are assumed to be dominated, and are therefore irrelevant in determining whether α-PSRO reaches an SSCC for this game. 18
Preprint. and conversely, f (s) > f (s ) ⇒ σ(f (s) − f (s )) ≥ σ(f (s ) − f (s)) k k k Without loss of generality, we reorder the strategies such that if i < k, f (s ) ≤ f (s ). i k Let s maximize the value objective. Therefore, by monotonicity, s maximizes σ(f (s) − f (s )). v v K Three possibilities then ensue. If there exists s such that σ(f (s) − f (s )) > σ(f (s ) − f (s)) K K then σ(f (s ) − f (s )) > σ(f (s ) − f (s )) v K K v since s maximizes σ(f (s) − f (s )) and σ is non-decreasing. Consequently s maximizes the PBR v K v objective. Indeed, let us remark that for all k ≤ K, we have that σ(f (s ) − f (s )) > σ(f (s ) − f (s )) v k k v since σ(f (s ) − f (s )) ≥ σ(f (s ) − f (s )) > σ(f (s ) − f (s )) ≥ σ(f (s ) − f (s )) v k v K K v k v Else, if there does not exist any policy s such that σ(f (s) − f (s )) > σ(f (s ) − f (s)), that is, for K K all s, σ(f (s) − f (s )) ≤ σ(f (s ) − f (s)) K K Since s is a possible solution to the value objective, K σ(f (s ) − f (s )) = σ(f (s ) − f (s )) v K K v Let n be the integer such that s = arg max{f (s ), s ∈ Population | ∃s s.t. σ(f (s) − f (s )) > σ(f (s ) − f (s))} n k k k k If s exists, then we have that for all s such that f (s ) > f (s ), n i i n σ(f (s ) − f (s )) = σ(f (s ) − f (s )) v i i v The PBR objective is K (cid:88) π 1[σ(f (s) − f (s )) > σ(f (s ) − f (s))] k k k k=1 which, according to our assumptions, is equivalent to n (cid:88) π 1[σ(f (s) − f (s )) > σ(f (s ) − f (s))] k k k k=1 We know that for all i ≤ n, σ(f (s ) − f (s )) > σ(f (s ) − f (s )), and therefore, s maximizes the v i i v v PBR objective. Finally, if s doesn’t exist, then any policy is solution to the PBR objective, and therefore s is. n v C.7 PROOF OF PROPOSITION 7 Proposition 7. Consider symmetric win-loss games where outcomes between deterministic strategies are deterministic. A preference-based RL agent (i.e., an agent aiming to maximize its probability of winning against a distribution π of strategies {s , . . . , s }) optimizes exactly the PBR objective (1). 1 N Proof. Commencing with the above preference-based RL objective, we calculate as follows, (cid:32) N (cid:33) (cid:88) arg max P σ beats π s = arg max E [P(σ beats s |index i selected)] i i i i σ σ i=1 N (cid:88) = arg max π P(σ beats s ) i i σ i=1 N (cid:88) = arg max π 1[σ receives a positive expected payoff against s ] i i σ i=1 19
Preprint. with the final equality whenever game outcomes between two deterministic strategies are deterministic. Note that this is precisely the PBR objective (1). C.8 PROOF OF PROPOSITION 8 Proposition 8. For symmetric two-player zero-sum games where off-diagonal payoffs have equal magnitude, all NE have support contained within that of the single-population α-Rank distribution. Proof. In the single-population case, the support of the α-Rank distribution is simply the (unique) sink strongly-connected component of the response graph (uniqueness follows from the fact that the response graph, viewed as an undirected graph, is fully-connected). We will now argue that for a strategy s in the sink strongly-connected component and a strategy z outside the sink strongly- connected component, we have (cid:88) (cid:88) π(a)M 1(s, a) > π(a)M 1(z, a) , (3) a∈S a∈S This inequality states that when an opponent plays according to π, the expected payoff to the row player is greater if they defect to s whenever they would have played z. This implies that if a supposed symmetric Nash equilibrium contains a strategy z outside the sink strongly-connected component in its support, then it could receive higher reward by playing s instead, which contradicts the fact that it is an NE. We show (3) by proving a stronger result — namely, that s dominates z as strategies. Firstly, since s is the sink strongly-connected component and z is not, s beats z, and so M 1(s, z) > M 1(s, s) = M 1(z, z) > M 1(z, s). Next, if a (cid:54)∈ {s, z} is in the sink strongly-connected component, then a beats z, and so M 1(s, a) > M 1(z, a) if s beats a, and M 1(s, a) = M 1(z, a) otherwise. Finally, if a (cid:54)= s, z is not in the sink strongly-connected component, then M 1(s, a) = M 1(z, a) is z beats a, and M 1(s, a) > M 1(z, a) otherwise. Thus, (3) is proven, and the result follows. C.9 PROOF OF PROPOSITION 9 Proposition 9. In a symmetric two-player zero-sum game, there exists an NE with support contained within that of the α-Rank distribution. Proof. Consider the restriction of the game to the strategies contained in the sink strongly-connected component of the original game. Let π be an NE for this restricted game, and consider this as a distribution over all strategies in the original game (putting 0 mass on strategies outside the sink component). We argue that this is an NE for the full game, and the statement follows. To see this, note that since any strategy outside the sink strongly-connected component receives a non-positive payoff when playing against a strategy in the sink strongly-connected component, and that for at least one strategy in the sink strongly-connected component, this payoff is negative. Considering the payoffs available to the row player when the column player plays according to π, we observe that the expected payoff for any strategy outside the sink strongly-connected component is negative, since every strategy in the sink strongly-connected component beats the strategy outside the component. The payoff when defecting to a strategy in the sink strongly-connected component must be non-positive, since π is an NE for the restricted game. 20
Preprint. D ADDITIONAL DETAILS ON EXPERIMENTS D.1 EXPERIMENTAL PROCEDURES Although the underlying Kuhn and Leduc poker games are stochastic (due to random initial card deals), the associated meta-games are essentially deterministic (as, given enough game simulations, the mean payoffs are fixed). The subsequent PSRO updates are, thus, also deterministic. Despite this, we report averages over 2 runs per PSRO M, primarily to capture stochasticity due to differences in machine-specific rounding errors that occur due to the distributed computational platforms we run these experiments on. D.2 DOMAIN DESCRIPTIONS Algorithms 2 to 4 provide an overview of the procedure we use to randomly-generate normal-form games for the oracle comparisons visualized in Fig. 2. Algorithm 2 GenerateTransitive(Actions, Players, mean = [0.0, 1.0], mean = [0.5, 0.5], value probability var = 0.1) 1: T = [] 2: for Player k do 3: Initialize f k = [0] ∗ Actions 4: for Action a ≤ Actions do 5: Randomly sample mean µ from mean according to mean value probability 6: f k[a] ∼ N (µ, var) 7: for Player k do 8: T [k] = f k − |Playe1 rs|−1 (cid:80) i(cid:54)=k f i 9: Return T Algorithm 3 GenerateCyclic(Actions, Players, var = 0.4) 1: C = [] 2: for Player k do 3: Initialize C[k] ∼ N (0, var), Shape(C[k]) = (Actions , . . . , Actions ) First Player Last Player 4: for Player k do (cid:80) 5: Sum = Actions ai of all player i(cid:54)=k C[k][a 1, . . . , a k−1, : , a k+1, ...] 6: Shape(Sum) = (1, . . . , 1, Actions Player k, 1, . . . , 1) 7: C[k] = C[k] − Sum 8: Return C Algorithm 4 General Normal Form Games Generation(Actions, Players) 1: Generate matrix lists T = GenerateTransitive(Actions, Players), C = GenerateCyclic(Actions, Players) 2: Return [T [k] + C[k] for Player k] K-player Kuhn poker is played with a deck of K + 1 cards. Each player starts with 2 chips and 1 face-down card, and antes 1 chip to play. Players either bet (raise/call) or fold iteratively, until each player is either in (has contributed equally to the pot) or has folded. Amongst the remaining players, the one with the highest-ranked card wins the pot. Leduc Poker, in comparison, has a significantly larger state-space. Players in Leduc have unlimited chips, receive 1 face-down card, ante 1 chip to play, with subsequent bets limited to 2 and 4 chips in rounds 1 and 2. A maximum of two raises are allowed in each round, and a public card is revealed before the second round. 21
Preprint. D.3 ADDITIONAL ORACLE COMPARISON RESULTS We present additional oracle comparisons in Fig. D.8. : BR : PBR PCS-Score 0.95 PCS-Score (0.05, 0.95) PCS-Score 0.05 O O ≥ ∈ 0.8 0.6 0.4 0.2 0.0 0 200 400 600 800 1000 Sk | | vnoC-α 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 70 80 90 100 Sk | | vnoC-α 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 Sk | | vnoC-α 0.8 0.6 0.4 0.2 0.0 10 15 20 25 30 Sk | | vnoC-α 1.0 0.8 0.6 0.4 0.2 0.0 0 200 400 600 800 1000 Sk | | (a) α-CONV erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 70 80 90 100 Sk | | erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 Sk | | erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 15 20 25 30 Sk | | erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 0 200 400 600 800 1000 Sk | | (b) PCS-SCORE for BR erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 70 80 90 100 Sk | | erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 20 30 40 50 60 Sk | | erocS-SCP 1.0 0.8 0.6 0.4 0.2 0.0 10 15 20 25 30 Sk | | erocS-SCP (c) PCS-SCORE for PBR Figure D.8: Oracle comparisons for randomly-generated normal-form games with varying player strategy space sizes |Sk|. The rows, in order, correspond to 2- to 5-player games. 22
Preprint. E α-RANK IN DETAIL In this section we give further details of α-Rank; for a full description, see Omidshafiei et al. (2019). Essentially α-Rank defines a directed response graph over the pure strategy profiles of the game under study, by indicating when a player has an incentive to make a unilateral deviation from their current strategy. An irreducible (noisy) random walk over this graph is then defined, and the strategy profile rankings are obtained by ordering the masses of this Markov chain’s unique invariant distribution π. The Markov transition matrix C that specifies this random walk is defined as follows for the multi- population case; see Omidshafiei et al. (2019) for the single-population case. Consider a pure strategy profile s ∈ S, and let σ = (σk, s−k) be the pure strategy profile which is equal to s, except for player k, which uses strategy σk ∈ Sk instead of sk. Let C denote the transition probability from s to σ, s,σ and C the self-transition probability of s, with each defined as: s,s (cid:40) η 1−exp(−α(Mk(σ)−Mk(s))) if Mk(σ) (cid:54)= Mk(s) C = 1−exp(−αm(Mk(σ)−Mk(s))) s,σ η otherwise , m (cid:88) C = 1 − C , s,s s,σ k∈[K] σ|σk∈Sk\{sk} where η = ((cid:80) (|Sl| − 1))−1. If two strategy profiles s and s(cid:48) differ in more than one player’s l strategy, then C = 0. Here α ≥ 0 and m ∈ N are parameters to be specified; the form of s,s(cid:48) this transition probability is described by evolutionary dynamics models from evolutionary game theory and is explained in more detail in Omidshafiei et al. (2019). Large values of α correspond to higher selection pressure in the evolutionary model under consideration; the version of α-Rank used throughout this paper corresponds to the limiting invariant distribution as α → ∞, under which only strategy profiles appearing in the sink strongly-connected components of the response graph can have positive mass. 23
Preprint. F TOWARDS THEORETICAL GUARANTEES FOR THE PROJECTED REPLICATOR DYNAMICS Computing Nash equilibria is intractable for general games and can suffer from a selection problem (Daskalakis et al., 2009); therefore, it quickly becomes computationally intractable to employ an exact Nash meta-solver in the inner loop of a PSRO algorithm. To get around this, Lanctot et al. (2017) use regret minimization algorithms to attain an approximate correlated equilibrium (which is guaranteed to be an approximate Nash equilibrium under certain conditions on the underlying game, such as two-player zero-sum). A dynamical system from evolutionary game theory that also converges to equilibria under certain conditions is the replicator dynamics (Taylor and Jonker, 1978; Schuster and Sigmund, 1983; Cressman and Tao, 2014; Bloembergen et al., 2015), which defines a dynamical system over distributions of strategies (πk(t) | k ∈ [K], s ∈ Sk), given by s π˙ k(t) = πk(t) (cid:2) M k(s, π−k(t)) − M k(πk(t))(cid:3) , for all k ∈ [K], s ∈ Sk , (4) s s with an arbitrary initial condition. Lanctot et al. (2017) introduced a variant of replicator dynamics, termed projected replicator dynamics (PRD), which projects the flow of the system so that each distribution πk(t) lies in the set ∆γ = {π ∈ ∆ | π ≥ γ/(|Sk| + 1), ∀s ∈ Sk}; see, e.g., Sk Sk s Nagurney and Zhang (2012) for properties of such projected dynamical systems. This heuristically enforces additional “exploration” relative to standard replicator dynamics, and was observed to provide strong empirical results when used as a meta-solver within PSRO. However, the introduction of projection potentially severs the connection between replicator dynamics and Nash equilibria, and the theoretical game-theoretic properties of PRD were left open in Lanctot et al. (2017). Here, we take a first step towards investigating theoretical guarantees for PRD. Specifically, we highlight a possible connection between α-Rank, the calculation of which requires no simulation, and a constrained variant of PRD, which we denote the ‘single-mutation PRD’ (or s-PRD), leaving formal investigation of this connection for future work. Specifically, s-PRD is a dynamical system over distributions (πk(t)|k ∈ [K], s ∈ Sk) that follows s the replicator dynamics (equation 4), with initial condition restricted so that each πk lies on the 0 1-skeleton ∆(1) = {π ∈ ∆ | (cid:80) 1 ≤ 2}. Further, whenever a strategy distribution Sk Sk s∈Sk πs(cid:54)=0 πk enters a δ-corner of the simplex, defined by ∆[δ] = {π ∈ ∆(1) | ∃s ∈ Sk s.t. π ≥ 1 − δ}, t Sk Sk s the non-zero element of πk(t) with mass at most δ is replaced with a uniformly randomly chosen strategy after a random time distributed according to Exp(µ), for some small µ > 0. This concludes the description of s-PRD. We note at this stage that s-PRD defines, essentially, a dynamical system on the 1-skeleton (or edges) of the simplex, with random mutations towards a uniformly-sampled randomly strategy profile s at the simplex vertices. At a high-level, this bears a close resemblance to the finite-population α-Rank dynamics defined in Omidshafiei et al. (2019); moreover, we note that the connection between s-PRD and true α-Rank dynamics becomes even more evident when taking into account the correspondence between the standard replicator dynamics and α-Rank that is noted in Omidshafiei et al. (2019, Theorem 2.1.4). We conclude by noting a major limitation of both s-PRD and PRD, which can limit their practical applicability even assuming a game-theoretic grounding can be proven for either. Specifically, with all such solvers, simulation of a dynamical system is required to obtain an approximate equilibrium, which may be costly in itself. Moreover, their dynamics can be chaotic even for simple instances of two-player two-strategy games (Palaiopanos et al., 2017). In practice, the combination of these two limitations may completely shatter the convergence properties of these algorithms in practice, in the sense that the question of how long to wait until convergence becomes increasingly difficult (and computationally expensive) to answer. By contrast, α-Rank does not rely on such simulations, thereby avoiding these empirical issues. We conclude by remarking again that, albeit informal, these results indicate a much stronger theoretical connection between α-Rank and standard PRD that may warrant future investigation. 24
Preprint. G MUJOCO SOCCER EXPERIMENT While the key objective of this paper is to take a first step in establishing a theoretically-grounded framework for PSRO-based training of agents in many-player settings, an exciting question concerns the behaviors of the proposed α-Rank-based PSRO algorithm in complex domains where function- approximation-based policies need to be relied upon for generalizable task execution. In this section, we take a preliminary step towards conducting this investigation, focusing in particular on the MuJoCo soccer domain introduced in Liu et al. (2019) (refer to https://github.com/deepmind/ dm_control/tree/master/dm_control/locomotion/soccer for the corresponding domain code). In particular, we conduct initial experiments comparing the performance of PSRO(α-Rank, RL) and PSRO(Uniform, RL), where we use an RL-agent as an oracle that approximates the best-response. For each of the two PSRO variants considered, we compose a hierarchical training procedure composed of two levels. At the low-level, which focuses on simulations of the underlying MuJoCo soccer game itself, we consider a collection of 8 reinforcement learners (which we call agents). We compose teams corresponding to 3 clones of each agent (i.e., 8 homogeneous teams in total) and evaluate the all pairwise team match-ups. Note that this yields a 2-player (team vs. team) meta-game, with payoffs corresponding to the average win-rates of each team when pitted against another. At the high-level, which corresponds to PSRO-based training for the players, we use the standard PSRO procedures outlined in this paper; i.e., we compute the meta-distribution, and expand the meta-population by 8 policies (corresponding to the 8 RL agents). Note that we train the PSRO(α-Rank, RL) and PSRO(Uniform, RL) agents independently (i.e., the two populations never interact with one another). Following training, however, we compare the effective performance of these two PSRO variants by pitting their trained agents (8 each) against one another, and recording the average win rates. These results are reported in Fig. G.9. We conclude by remarking that these results, although interesting, primarily are intended to lay the foundation for use of α-Rank as a meta-solver in complex many agent domains where RL agents serve as useful oracles; additional, more extensive research and analysis is necessary to make these results conclusive in domains such as MuJoCo soccer. We plan to carry out several experiments along these lines in future work. 25
Preprint. Figure G.9: α-PSRO versus PSRO(Uniform, BR) in the MuJoCo Soccer domain. Left is the matrix representing the probability of winning for α-PSRO and PSRO(Uniform, BR)’s best 8 agents. Right is the α-Rank distribution over the meta-game induced by these agents. Yellow are high probabilities, dark-blue are low probabilities.The diagonal is taken to be 0. 26
