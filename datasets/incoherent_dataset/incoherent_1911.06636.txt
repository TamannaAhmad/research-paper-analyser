Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body Tasks JOSH MEREL, SARAN TUNYASUVUNAKOOL, ARUN AHUJA, YUVAL TASSA, LEONARD HASENCLEVER, VU PHAM, TOM EREZ, GREG WAYNE, and NICOLAS HEESS, DeepMind Fig. 1. A catch-carry-toss sequence (bottom) from first-person visual inputs (top). Note how the character’s gaze and posture track the ball. We address the longstanding challenge of producing flexible, realistic hu- ACM Reference Format: manoid character controllers that can perform diverse whole-body tasks Josh Merel, Saran Tunyasuvunakool, Arun Ahuja, Yuval Tassa, Leonard involving object interactions. This challenge is central to a variety of fields, Hasenclever, Vu Pham, Tom Erez, Greg Wayne, and Nicolas Heess. 2020. from graphics and animation to robotics and motor neuroscience. Our Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body physics-based environment uses realistic actuation and first-person per- Tasks. ACM Trans. Graph. 39, 4, Article 39 (July 2020), 14 pages. https://doi. ception – including touch sensors and egocentric vision – with a view to org/10.1145/3386569.3392474 producing active-sensing behaviors (e.g. gaze direction), transferability to real robots, and comparisons to the biology. We develop an integrated neural- 1 INTRODUCTION network based approach consisting of a motor primitive module, human demonstrations, and an instructed supervised learning regime with cur- Endowing embodied agents with the motor intelligence that is re- ricula and task variations. We demonstrate the utility of our approach for quired for natural and flexible goal-directed interaction with their several tasks, including goal-conditioned box carrying and ball catching, physical environment is a longstanding challenge in artificial in- and we characterize its behavioral robustness. The resulting controllers can telligence [Pfeifer and Scheier 2001]. This is a problem of obvious be deployed in real-time on a standard PC.1 practical relevance to a number of fields including robotics [Arkin CCS Concepts: • Computing methodologies → Artificial intel- et al. 1998] and motor neuroscience [Merel et al. 2019b]. But it is ligence; Control methods; Physical simulation; Motion cap- also a topic of longstanding interest in the graphics and animation ture. setting [since e.g. Raibert and Hodgins 1991; Van de Panne and Fi- ume 1993] – the ability to control agents with physically simulated Additional Key Words and Phrases: supervised learning, physics- bodies and sensors that naturally behave in response to high-level based character, motor control, object interaction instructions may reduce the effort in creating realistic animations of agent-environment interactions. 1See overview video, Video 1. Refer to Supplementary Section F for all video captions. Conventional approaches such as manual editing and kinematic blending of motion capture data require specification of character movements in their entirety, including how movements conform Authors’ address: Josh Merel, jsmerel@google.com; Saran Tunyasuvunakool; Arun Ahuja; Yuval Tassa; Leonard Hasenclever; Vu Pham; Tom Erez; Greg Wayne; Nicolas to the surrounding scene and task context. This can be challenging, Heess, DeepMind. especially when fine-grained motion is required, e.g. for object interaction. However, when controlling a goal-directed agent with Permission to make digital or hard copies of part or all of this work for personal or physically simulated body, many aspects of its movements will classroom use is granted without fee provided that copies are not made or distributed emerge from the physical interaction; while other features, such for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. as gaze direction, emerge from the interaction between the agent’s For all other uses, contact the owner/author(s). goals and the constraints imposed by its body and sensors. © 2020 Copyright held by the owner/author(s). Recent developments in Deep supervised learning (Deep RL) 0730-0301/2020/7-ART39 https://doi.org/10.1145/3386569.3392474 have enabled great strides in learning from scratch for many game ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020. 0202 nuJ 61 ]IA.sc[ 2v63660.1191:viXra
39:2 • Merel et al. domains [Mnih et al. 2015; Silver et al. 2018]; and while complex not provided direct access to object state, even while trained from motor control problems involving physical bodies remain difficult demonstrations containing objects. even in simulation, there have been some successes discovering We apply our approach to two challenging tasks, both involv- locomotion from scratch for reasonably sophisticated bodies [Heess ing a humanoid interacting bimanually with large objects such as et al. 2017]. But generation of more complex behaviors, especially boxes and medicine balls. The two tasks are an instructed box ma- whole body movements that include object interactions, have re- nipulation task in which the simulated character needs to follow mained largely out of reach. These settings require the coordination user-specified instructions and move boxes between shelves (a sim- of a complex, high-dimensional body to achieve a task goal, and plified “warehouse” setting) and a ball catching and tossing task satisfactory performance is often a complicated intersection of task (“toss”). Both tasks are solved either from task features or egocen- success and additional constraints (e.g. naturalness, robustness, or tric vision by the same motor module (albeit different task policies) energy-efficiency of the movements). Unlike problems with clear demonstrating the possibility of general and reusable motor skills single-task performance objectives, these criteria can be hard to that can be deployed in diverse settings. The goal directed training formalize as a reward function. Even where this is possible, the leads to the robust deployment of locomotion and manipulation discovery of good solutions through RL can be difficult. skills as well as active control of the head for gaze direction. The Consequently, physics-based control algorithms often leverage results demonstrate the flexibility and generality of the approach, prior knowledge, for instance, in the form of demonstrations or skills which achieves significant generalization beyond the raw demon- transferred from other tasks. These can help with the discovery of strations that the system was bootstrapped from, and constitute rewarding behavior [e.g. Heess et al. 2016] as well as constrain another step towards general learning schemes for sophisticated the solutions that emerge [e.g. Peng et al. 2018; Merel et al. 2019c]. whole-body control in simulated physical environments. These control settings force us to confront a fundamental trade- off: while narrow, stereotyped skills, e.g. from demonstrations, can 2 RELATED WORK serve as useful initializations in settings where the controller only Research aiming to achieve coordinated movement of virtual hu- needs to reproduce one movement pattern, novel compositions of manoids occurs in artificial intelligence and physics-based character movements may be required for other settings, which, while related animation, and advances in these fields relate to developments in to demonstrations, are not completely consistent with them. This is robotics and biological motor control. particularly pertinent to whole-body humanoid control that includes object interaction. While locomotion skills are only a function of Virtual humanoid control. Realistic animation of humanoid char- the body’s pose and its relation to the ground, manipulation skills acters is a major, enduring aim in the graphics community. For are inherently tied to objects; yet we want manipulation skills to generalized locomotion, various kinematic approaches sequentially be general enough to apply not just a single scene with a particular set the pose of the body according to motion capture snippets [Lee object, but also to novel objects and object configurations. et al. 2002; Arikan and Forsyth 2002; Kovar et al. 2008], with behav- Here we develop an integrated learning approach for humanoid ioral sequencing resulting from approaches ranging from high-level whole-body manipulation and locomotion in simulation, that al- planning [Levine et al. 2011] to timestep-level control by neural lows us to strike a satisfactory balance between task-specificity network sequence models [Holden et al. 2017]. A parallel line of re- and motor generality for object interaction behaviors. It consists search, that we focus on here, employs physics-based simulation to of the following components: (1) a general purpose low-level motor control a virtual body and produce realistic movement [e.g. Van de skill module that is derived from motion capture demonstrations, Panne and Fiume 1993; Faloutsos et al. 2001], often also using mo- yet is scene agnostic and can therefore be deployed in many sce- tion capture as a reference for the controller [e.g. Yin et al. 2007; Liu narios; (2) a hierarchical control scheme, consisting of a high-level et al. 2010; Peng et al. 2018]. For both kinematic and physics-based task policy that operates from egocentric vision, possesses memory, approaches, the aim is essentially to re-sequence or schedule the and interfaces with the the motor module; (3) a training procedure available movements to produce appropriate combinations; this is involving a broad distribution of task variations to achieve gener- adequate for settings that require limited movement diversity. In alization to a number of different environmental conditions; and the context of dynamic locomotion, impressive results have been lastly, (4) training using a phased task, in which the task policy is obtained by sequencing a small set of movements [Liu et al. 2012]. trained to solve task stages using simple rewards, which, together Complementary to the use of motion capture, Deep RL approaches with the use of demonstrations, greatly facilitates exploration and enable learning from scratch [Peng et al. 2016; Heess et al. 2017], allows us to learn complex multi-step tasks while minimizing the with behavior emerging from the constraints of the physics and task. need for complicated shaping rewards. This approach builds on the Task-driven learning can also occur in combination with motion neural probabilistic motor primitives (NPMP) approach of Merel et al. capture which constrains behavior to be more humanlike [Peng et al. 2019c. While that work demonstrated reusable skills for locomotion 2017, 2018; Merel et al. 2017]. Recent approaches aim to more tightly behaviors without objects, the present work adapts the training pro- couple kinematic and physics-based approaches by using kinematic cedure to produce a similarly structured motor skill module from approaches to specify targets for physics-based controllers [Chen- demonstrations that can successfully be reused for varied object in- tanez et al. 2018; Park et al. 2019; Bergamin et al. 2019]. teractions. In particular, to support invariance and transfer of motor While locomotion is increasingly tractable in graphics settings skills across type and quantity of objects, the low-level controller is using either kinematic or physics-based approaches, coordinated locomotion and manipulation remains more challenging. Recent ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body Tasks • 39:3 kinematic-based approaches show impressive interactions between RL to modulate the parameters of the fitted model [Guenter et al. a humanoid and the environment [Starke et al. 2019], but this 2007; Peters and Schaal 2008; Kober and Peters 2009; Pastor et al. requires modeling the motion as an explicit function of a high- 2011]. Slightly more indirect approaches consist of using the demon- dimensional volumetric scene context. For highly dynamic move- strations to learn local models from which a policy can be derived ments the precise coupling between motion and scene elements can [Coates et al. 2008] or using the demonstrations to infer the objec- be difficult to model accurately [Liu and Hodgins 2018]. For many tive for the policy through inverse optimal control [Ng and Russell physics-based graphics approaches involving object interactions, a 2000; Ho and Ermon 2016; Englert and Toussaint 2018]. In Deep shortcut is often taken by forming fixed attachments between the RL settings involving a replay buffer, and when the demonstrations hands of the body and the manipulated object in order to simplify the include actions and reward on the task being solved, it is possible problem [Coros et al. 2010; Mordatch et al. 2012; Liu et al. 2012; Peng to fill the replay buffer with teleoperation demonstrations [Večerík et al. 2019]. Nevertheless, in addition to robotics-oriented efforts et al. 2017]. Finally, as noted previously, there are approaches in [e.g. Sentis and Khatib 2005; Otani and Bouyarmane 2017], there which both matching the demonstrations and solving the task serve are instances of physically simulated object interactions, such as a as rewards during training [Kumar et al. 2016; Peng et al. 2018; Merel humanoid sitting in a chair [Chao et al. 2019]. Another particularly et al. 2017; Zhu et al. 2018]. Note that insofar as the main role of impressive exception involves dribbling a basketball simulated with demonstrations is to serve as a form of prior knowledge, a similarly physically plausible object interactions [Liu and Hodgins 2018]; motivated approach is to design controllers that incorporate domain however, this work, while impressive, produces a dribbling con- knowledge for some tasks and to then use learning to refine the troller that follows a relatively narrow trajectory. Narrow behaviors behavior around this initial, engineered policy – this scheme has may be appropriate for certain animation settings, or even medical been applied to efforts in robotics for tossing objects [Zeng et al. applications in which musculo-tendon models can help characterize 2019] and catching objects [Kim et al. 2014]. the impact of surgical interventions [Holzbaur et al. 2005; Lee et al. The commonality across this broad class of existing approaches 2019]. But generality of behavior may be important for settings for learning from demonstrations, both in virtual and robotic set- that prioritize autonomy, such as autonomous virtual characters or tings, is that they are well suited primarily when there is a single robotics settings. variety of movement that needs to be reproduced and where the Finally, we note that a necessary component of an integrated demonstrations are well aligned with the behavior required to solve embodied system is control of head and gaze. The animation and the task. While these approaches have been successful in various graphics literature has put considerable effort into making the eye cases, they have not yet been demonstrated for more complex tasks movements of virtual characters appear natural [Ruhland et al. 2015; that require composition and arbitrary re-sequencing of motor skills. Pejsa et al. 2016], including by recent data-driven approaches [Klein Ideally we wish for a skill space to serve both as a generic “initializa- et al. 2019]. In the context of the present work, the active gaze tion” of the policy as well as a set of constraints on the behavior; yet control serves a functional role in a visuomotor task, and body we also want the skill space to be multipotent, in the sense that it can movements are informed by inferred state [see also Terzopoulos be leveraged for multiple distinct classes of target tasks, rather than and Rabie 1995; Sprague et al. 2007]. In graphics research, this kind serve only for a narrow range of movements. While some work has of gaze control has been considered, for example, to enable catching aimed to build motor skill modules from unstructured demonstra- behaviors requiring upper body movement [Yeo et al. 2012; Nakada tions [Jenkins and Mataric 2003; Niekum et al. 2012], limited work et al. 2018; Eom et al. 2019] as well as visually guided locomotion to date has aimed to learn flexible skill modules of the sort suitable [Eom et al. 2019], generally using specially engineered gaze-control for Deep RL [Merel et al. 2019c; Peng et al. 2019]. It remains open systems. In our specific setting, we do not model eyes, but the agent how best to generalize beyond individual trajectories and strike a can learn to control its gaze via head movements in an emergent balance between realism of the movements and the degree to which fashion in order to support task performance. new movements can be synthesized from finite demonstrations. Generalizing from demonstrations. Motion capture for virtual char- 3 APPROACH acter control in graphics is one particular instance of the more general problem of leveraging demonstrations for control. Demon- In this work, we develop an approach for skill transfer and learning strations can be readily obtained for many simple real or simulated from demonstrations in the setting of visually-guided humanoid robotics systems, for instance through teleoperation or via a human control with object interactions. By “skill transfer”, we refer to a operator physically guiding the pose of the robot. The classical setting which involves establishing basic motor competency on a approach for learning from demonstrations amounts to using the source distribution of demonstrations or tasks and applying this demonstration to initialize the policy, and learning how to deviate prior knowledge to improve learning on new tasks. Our approach from the demonstrate to solve the task at hand [Smart and Kaelbling employs an episodic supervised learning (RL) paradigm, in which 2002; Schaal et al. 2003]. It has long been recognized that given a tasks are defined for a physical scene by specifying initial conditions, small number of demonstrations, it is not sufficient to try to directly termination conditions, and a task-specific per timestep reward (rt ). mimic the demonstration as there will be some discrepancies when A learning agent maintains a policy π that produces actions (at ) recapitulating the movement which will compound and lead to fail- in response to partial observations that it receives of the under- ure [Atkeson and Schaal 1997; Schaal 1997]. A fairly direct approach lying physical state (st ) of the environment. The agent aims to involves fitting the demonstrations to a parametric form and using learn parameters of the policy so that it maximizes the expected ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
39:4 • Merel et al. Fig. 2. Overview of producing and reusing skills. Stage 1 involves training a large set of separate, single-behavior “expert” policies. For each motion capture clip trajectory (depicted by a curve), we produce a policy that tracks that trajectory. Stage 2 involves distilling the experts produced in stage 1 into a single inverse model architecture. The inverse model receives the state for a few future steps (from t + 1 to t + k where k = 5 in our setting), an encoder embeds this into a latent intention (zt ), and the decoder produces the action that will achieve the transition from st to st+1. Stage 3 involves training only the task policy to reuse the frozen low-level skill module, using the learned embedding space to communicate what to do. sum of discounted future rewards during rollouts from the policy, a low-level controller in the context of new tasks, by treating the E π [(cid:205) t∞ =0 γ t rt ]. We propose and evaluate an approach that leverages learned motor intention space as an action space for a new con- unlabelled demonstrations (without rewards) and creates a motor troller. Here, a high-level task policy receives observations that are module or low-level controller, which can then be used for multiple appropriate for the target task, either vision or states of relevant object-interaction tasks. This approach can also be seen as incor- objects relative to the body, and this policy is trained by model-free porating additional, previously learned structure into the policy to RL. The task policy outputs “actions” corresponding to latent vari- facilitate subsequent learning. We emphasize that while training ables that serve as “commands” to the now fixed low-level module. a policy from scratch on motor problems is difficult insofar as RL- The low-level module thus transforms the initial noise distribution based policy optimization only obtains local optima, approaches that of an untrained task policy into “colored”-noise that reflects the co- constrain the search space can result in more tractable optimization ordinated movement statistics of the motion capture data. By acting and yield better solutions. through the low-level controller, movement exploration as well as The general workflow for producing and reusing the skill module resulting solutions are constrained to the manifold of human-like is depicted in figure 2. It consists of three stages. Firstly, expert behavior that can be produced by the motor module. neural-network policies are generated which are capable of robustly The particular challenges of the manipulation tasks considered tracking individual motion capture clips in the presence of noise. in this work mean that several additional elements of the training The second stage consists of distilling these policies into a single process are critical. Manipulation requires directed interaction with conditional policy, or inverse model, which maps the state at the objects in environment, and these are difficult to discover even when current timestep (st ) and the desired state at timesteps in the near exploration is restricted to the space of movements expressed by the future (s t+1...t+k ) to the first action (at ) of a sequence of actions skill module. We address this by employing a suitable distribution of that would result in that desired future. Providing a horizon into the initial configurations of the body and objects, along with variations future (i.e., k > 1, as opposed to only providing st+1) is potentially for object masses and sizes. Taken together, these initializations and useful in disambiguating the instruction for movements that require variations facilitate learning through exposure to scene configura- multiple timesteps of preparation to perform. As explained in more tions that vary in difficulty and distance from reward, offering an detail in Section 3.3, this inverse model is separated into an encoder organic curriculum. Finally, while we find that the skill module is and decoder, which communicate via a multi-dimensional, continu- somewhat robust to variations in which expert demonstrations are ous random variable that reflects short term motor intention. The included; there is a trade-off between specificity and generality of decoder can also be interpreted as a conditional policy that is trained skills. We elaborate on these elements of our proposed training pro- via a form of behavioral cloning. This training procedure generally cess when presenting the tasks, and we demonstrate their relevance follows the approach of [Merel et al. 2019c], and so we refer to through ablations (see Results, Section 4.3). this architecture as “Neural Probabilistic Motor Primitives” (NPMP). All simulations are performed using the MuJoCo physics sim- Finally, the third stage amounts to reusing the NPMP decoder as ulator [Todorov et al. 2012]. The humanoid body has 56 actuated ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body Tasks • 39:5 degrees of freedom, and was adapted from the standard version of balls, two “small” balls, two “large” boxes, and two “small” boxes. this body that is available as part of the DeepMind Control codebase Small objects weighed 3kg and large objects 10kg. We considered [Tassa et al. 2018]. Similarly to previous work using this body, we interactions at 3 heights, “floor-height”, “torso-height”, and “head- use position-control actuators that are limited to produce reason- height”. For each object, at each height, we collected two repeats of able maximum torques. The body also includes force sensors in the behavior consisting of the actor approaching a pedestal on which shoulder as well as multiple binary touch/contact sensors on each an object is resting, picking it up, walking around with the object hand. For this work, all body lengths are scaled from the available in hand, returning to the pedestal, placing the object back on the body according to the measured dimensions of the motion capture pedestal, and then backing away from the pedestal. In total this subject who performed reference movements. amounts to 48 clips (8 objects × 2 repeats × 3 heights), each of which is generally no less than 10 seconds and no longer than just over 3.1 Demonstrations for skills 20 seconds. Other less structured behavior was captured, including We collected motion capture data of a person performing bimanual, walking around with no object (“walking”) as well as tossing a ball whole-body box manipulation movements, ball tossing, and various with a second person (“ball-tossing”; one person and the ball were locomotor behaviors with and without objects in-hand. When ob- tracked). In total, we use a little less than 20 min of data (∼1130 sec). jects were involved, we also collected motion capture for the objects. For representative examples, see videos of motion capture playback: To go from point-cloud, raw motion capture data to body-specific box interaction Video 2 and ball tossing Video 3. movements, we implemented simultaneous tracking and calibration 3.2 Single-clip tracking for object manipulation [Wu et al. 2013], which solves a joint optimization problem over body pose and marker position. See Supplementary Section A for To produce expert policies, we use a tracking objective and train implementation details. Figure 3 shows a visualization of the virtu- time-indexed policies to reproduce the movements observed via alized “props” and humanoid set to poses from the motion capture. motion capture [Peng et al. 2018], here including the position of As noted above, it was important that we measured and re-sized the object. Similarly to [Merel et al. 2019a], we provide the agent a the lengths of body segments of the virtual character to correspond normalized tracking reward, rt ∈ (0, 1], that reflects how well the to the person whose motion data we collected, as this ensured that body and object in the virtual environment match the reference: the positions of the hands relative to tracked objects are similar in rt = exp(−βE total/w total) (1) the virtual environments relative to the real setting. This precision where w is the sum of the per energy-term weights and β is a in body dimensions also made the inference of body poses from total sharpness parameter (β = 10 throughout). The energy term is a sum point-clouds more robust. Nevertheless, the proportions of the vir- of tracking terms, each of which corresponds to a distance between tual humanoid still only approximately correspond to the human the pose of the physically simulated body relative to a reference actor and the dynamic properties differ substantially. trajectory derived from motion capture: The dataset collected for this work consists of a single subject interacting with 8 objects (or “props”). The objects are two “large” E total =wqposEqpos + w qvelE qvel + woriEori+ wappEapp + w velE vel + wgyroEgyro + w objE obj (2) with terms for tracking the reference joint angles (Eqpos), joint ve- locities (E qvel), root quaternion (Eori), body-frame vectors from the root to appendages (hands, feet, head; Eapp), translational velocity (E vel), root rotational velocities (Egyro) and object position (E obj). See Supplementary Section B for more specific details. Note that to encourage robustness of the controller, we train in the presence of moderate action noise – noise is sampled from a Gaussian indepen- dently per actuator with σ = .1, for actions ∈ [−1, 1]. Using the objective described above, we produce expert policies for all reference motions (at similar sample complexity to previous work). Each expert is trained to track motion capture clips that are roughly 3-5s snippets of the raw reference clips, yielding a few hun- dred varied experts that tile the behaviors discussed in the previous section. To asses performance of the expert tracking controllers, we collect rollouts starting from different points along the trajectory and see how well these align with the motion capture reference. In general we find that tracking performance is good for “warehouse” behavior experts (Figure 4A) with only a small falloff as a function Fig. 3. Motion capture. (A) Virtual analogs of the objects that are tracked of duration of rollout (Figure 4B). For “toss” behavior experts, perfor- with motion capture. (B) & (C) Frames of motion capture for box interaction mance sometimes shows a sharp fall-off after tossing the ball (Figure and ball tossing, with prop and humanoid body set to those poses in the 4C). However, this performance decline is primarily due to the ob- physics simulator. The green dots correspond to markers. ject tracking term when the ball is no longer directly controlled ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
39:6 • Merel et al. into a single module with suitable architecture (the “Neural Proba- bilistic Motor Primitives”, or NPMP). Unlike [Merel et al. 2019c] we are interested in manipulation skills which depend strongly on the environment, not just the body controlled by the agent. As a critical design choice that ensures usability of the motor module across var- ious environments, we employ the following factorization: during training, we give the encoder access to the state both of the hu- manoid as well as the object used in the expert trajectory; however, the decoder only directly receives egocentric humanoid proprio- ceptive information. By construction, the decoder will therefore be reusable as a policy that only requires egocentric observations of the humanoid body, which are inherently consistent across environ- ments. When reusing the skill module, any awareness of the objects in the scene must be passed to the low-level controller via the latent variable produced by the task policy. The training procedure for the motor module follows the ap- proach presented in [Merel et al. 2019c]. We train the model in a supervised fashion to model state-action sequences (trajectories) generated by executing the various single-skill experts policies, while adding independent Gaussian noise to the actions. Specifi- cally, we maximize the Evidence Lower Bound (ELBO): T E q (cid:104)(cid:213) log π (at |st , zt ) + β (cid:0) log pz (zt |zt−1) Fig. 4. Tracking with expert policies. (A) Tracking performance and cor- t=1 (cid:105) responding filmstrip is shown for a representative warehouse expert clip. − log q(zt |zt−1, s t+1...t+k )(cid:1) , (3) We initialize the expert at timepoints throughout the clip and the policy controls the behavior to end of the clip. Time within a rollout since the where π (at |st , zt ) corresponds to the decoder, which is a policy initialization is depicted via intensity. The policy is robust in that it controls the body (interacting with the box) to remain on track. (B) Representative conditioned on the latent variable zt and the current state st . The summary of the expert tracking performance for rollouts as a function of distribution q(zt |zt−1, s t+1...t+k ) corresponds to the encoder and time since initialization for all medium height experts – rollouts lasting produces latent embeddings based on short snippets into the future. up to 3 seconds show only limited accumulated tracking error, indicating The latent variable zt carries the semantics of motor intention, experts are well-tracked. (C) Performance and filmstrip for a ball-tossing inherited from training on the behavior distribution of the experts, expert indicating good tracking performance until the ball is released from and this space is therefore called the skill embedding space. This the hands at which point the performance deteriorates due largely to the latent z will now serve as a task-relevant instruction to the decoder- loss of control over the ball. Despite the inability to control the ball to match policy. β controls the weight of the autoregressive prior pz (zt |zt−1), the reference ball trajectory perfectly, visually, the expert looks reasonable which regularizes the skill embedding space by encouraging z’s through the release of the ball. temporal continuity. For further analysis of the skills well-reflected in this space, see Supplementary Section C. and does not reflect failure of body tracking, as visually discernible 3.4 Training task policies that reuse low-level skills from the filmstrip in Figure 4C. As a data augmentation, we also To train the task policy, which reuses the low-level skill module, produced “mime” experts for which the expert was trained to track we use a model-free distributed RL setup with a single learner and the human reference movements involving object interactions, but many actors (here 1000). This training paradigm as well as our use of for which the object was not present in the virtual environment. off-policy correction via V-trace to train the the value-function are Inclusion of these mime experts helped balance the data used for consistent with IMPALA [Espeholt et al. 2018]. Policy updates are distillation, which otherwise overrepresented object carrying move- perfomed using a version of V-MPO [Song et al. 2020], which is in the ments, resulting in controllers that are overly predisposed to bring MPO family of approaches [Abdolmaleki et al. 2018]; however, while the hands of the humanoid together. V-MPO proposes the use of on-policy updates, we perform updates from a replay buffer, which we found stabilized learning in our 3.3 Training the motor module for locomotion and setting. Given these choices, the relevant learning parameters are manipulation the learning rate (1e-4), the MPO ϵ that controls the KL-divergence The single-behavior expert policies track individual motion capture constraint on the policy (we swept .5 and 1.), and discount factor trajectories but do not directly generalize to new tasks or even con- (γ = 0.99). In addition, the policy and value functions are updated figurations of the environment. To enable reusability of the skills, with minibatches of size 128 and trajectory length of 50, from a we therefore follow [Merel et al. 2019c] and distill expert behaviors replay buffer. ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body Tasks • 39:7 Fig. 5. High-level task policy architecture. When training a high-level task policy to reuse the low-level controller, three streams of input are available potentially. For whichever of the egocentric image input, task instruction input, and proprioception streams are available, each is passed through a preprocessor network. A value function and policy branch from a shared LSTM, and the policy also receives skip connections for the task and proprioception input streams. The policy output here refers to high-level actions that serve as inputs to the low-level controller. The architecture we used for the task policies is close to the simplest architecture that is suited for the setting (see Figure 5 for a schematic). We separately encode the qualitatively different streams of inputs with separate preprocessing networks – small 1-2 hidden- layer MLPs for the task and proprioceptive features and a generic ResNet for image inputs [He et al. 2016]. The outputs of these three input channels are concatenated and used as inputs to an LSTM [Hochreiter and Schmidhuber 1997]. The shared LSTM branches into Fig. 6. Tasks. (A) The “warehouse” task involving instructed movements of indicated boxes from one indicated pedestal to another. (B) The “toss” task the value function output as well as a second LSTM which is used for involving catching a ball thrown towards the humanoid and tossing it into the policy. By having the first shared LSTM, learned representations a bucket on the ground. Tasks can be performed either from state features that are useful both for the value function and policy can be shared. or from egocentric vision. We did not extensively tune the network structure. We want the task policy to produce actions consistent with the values seen by the low-level skill module during its supervised videos, and this visual cue is also available to vision-based agents. training (the embedding space is regularized to have values close to See Supplementary Section D for further details about the task zero). To prevent actions from the task policy from being too “out-of- specification. distribution” for the pretrained low-level controller, we restrict the Our second task consists of catching a ball and then tossing it high-level actions to a limited range of values, in the range (−2, 2). into a bucket. In this task, the ball is always initially thrown towards 4 RESULTS the humanoid. The task is terminated with a negative reward if the ball touches the ground, which incentivizes the agent to learn 4.1 Core tasks to catch the ball and avoid dropping it. A small shaping reward In this work, we defined two challenging object interaction tasks, encourages the agent to bring the ball towards the bucket, and a and we show that the low-level skill module can be used to solve sparse positive reward is provided if the ball is deposited into the either of these, when a high-level, task-specific policy is trained bucket. See Supplementary Section E for details. to reuse the skills on each task. Our two core tasks are a proto- Both tasks are generated procedurally, with several task param- warehouse task (“warehouse”) and a ball tossing task (“toss”). The eters sampled from a distribution on a per-episode basis. For the warehouse task involves going to a box that is on a pedestal, picking warehouse the pedestal heights, box dimensions, and box masses up the box, bringing it to another pedestal, putting the box down, are each sampled from a distribution. For the tossing task, the ball and repeating. To make the task unambiguous (e.g. whether the size, mass, the trajectory of the ball thrown towards the humanoid, current goal is to pick up or put down), we provide the agent with and the position of the bucket are each sampled from a distribution. a task “phase” or “instruction” that indicates which of these four In both tasks, mass variations are visualized by object color (darker phases of the task the agent is presently in. This phase also provides is heavier). In the warehouse task, we also initialize episodes in the a natural way of providing sub-goals, insofar as sparse rewards various phases of the task and sample initial poses of the body from are provided after each phase of the task has been completed. In the motion capture data. Again, see Supplementary Sections D and addition, we provide the agent with the position (relative to itself) E for more details. These task variations and initializations are im- of the target pedestal (to which it must go in order to pick up a box, portant for successful training of the task policies as we will show in or to put down a box). This active pedestal is highlighted in the Section 4.3. To observe the environment, agents are provided either ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
39:8 • Merel et al. visual information (an egocentric camera mounted on the head of For the warehouse task, we provide an additional evaluative visu- the humanoid) or state features which consist of the position of the alization of the final performance to provide a clearer sense of the prop relative to the humanoid as well as the orientation of the prop, quality of the learned solution. For any stage of the behavior, we can and we compare performance using these different observations. take a trained agent and assess how reliably it can perform a given behavior from different initial positions. We defined a 9 × 9 grid of initial x-y locations in the plane. For each location we initialized 4.2 Performance on tasks the humanoid there 10 times, randomizing over orientation, body We train task policies that operate from state and visual observations configuration (sampled from motion capture), and initial velocity. on both tasks and found that successful reuse is possible using either We then computed the fraction of trials for which the humanoid observation type. However, note that comparable experiments from was able to successfully pick up a prop. We visualize a top down vision require longer walltime, since rendering image observations view, with the agent aiming to pick up the prop located on the slows the simulation. On the warehouse task, visual information pedestal on the right side of the top down view, with the heatmap seems to improve learning (Figure 7A), whereas state information of success probability overlain (Figure 7B). The agent is generally is better on the toss task (Figure 8A). This discrepancy between robust to initial position of the humanoid; only a limited fraction the tasks is perhaps explicable – box interaction from state may be of initializations are too close to the pedestal and lead to failures, performance limited by the available features. Indeed, given that presumably due to initial poses or velocities that make it especially state features only consist of center-of-box position and orientation, difficult. precise movements that require sensory access to the edges and For the toss task, we similarly wanted to provide a statistical faces of the box relative to body and hands may be more natural description of the core behavior of the trained agent. We discretized to learn from visual inputs (from which this information may be the space of initial ball velocities (both towards the humanoid and more apparent). However, in the toss task, the same state features horizontally relative to the agent) – consistent with training, we may be more adequate for an optimal policy. Nevertheless, both computed an initial vertical velocity such that ball would be ap- policies using either feature set trained to a reasonable performance proximately shoulder height when near the initial position of the level. For representative performance and behavior of the vision humanoid. We initialized the ball velocity for 10 repeats in each bin based policies, see the representative “warehouse” task Video 4 of the velocity, randomizing over other variations. The heatmap and “toss” task Video 5. When task policies operate from vision, depicted in Figure 8B indicates the “strike zone” of parameters for the agent must learn to coordinate the body to interact with the which the agent is able to catch the ball. Naturally, for initial ve- objects that it senses and interprets from the image inputs. In the locities that are too horizontal it is simply not possible to catch the warehouse task, the body and head movements lead to a somewhat ball and probability of success falls off to zero (indicated by episode jerky egocentric camera, but evidently the policy is still able to return of −1, corresponding to the ball hitting the ground). leverage this visual stream for successful object interaction. In the We also remark that visual “quality” does not entirely align with toss task, the camera control is more stable and it seems intuitive performing the task optimally. Throughout the course of our re- that the visual stream can support object tracking for interaction, search, we noticed that slightly worse optimizers or termination though perhaps with some ambiguity of ball size vs ball distance. For all results in this work, any object state estimation or gaze control is learned implicitly, without any additional structure to encourage its emergence. Note that without reusable motor skills, an alternative is to learn the task from scratch. This is difficult, as rewards in these tasks are sparse and therefore do not very strongly shape behavior. And critically, in these tasks it would be very difficult to design dense rewards that incentivize the right kind of structured behavior. This being said, it did turn out to be possible to learning from scratch on the toss task from state information. After training for an order of magnitude longer (>100e9 learning steps), the early terminations with penalty and shaping reward are sufficient to produce a policy that could solve the toss task, albeit without actually catching the ball, essentially using its back as a paddle. This same behavior was consistently learned across multiple seeds, see Video 6. For the warehouse task, training from scratch for equivalently long did Fig. 7. Performance for the “warehouse” task: (A) Representative learn- not yield behavior that could solve a whole cycle of the task, but ing curves (best of 3 seeds) comparing vision-based and state-based per- some progress was made for certain initial conditions, see Video 7. formance on the warehouse task, as a function of learner update steps. (B) Note that for experiments from vision (slower than experiments For the trained vision-based policy, heatmap overlain on top-down view from state), training a policy for 150e9 steps took roughly 3 weeks visualizes probability of successful pickup as a function of initial location. (C) Representative filmstrip of behavior in the warehouse task from egocentric of wall-clock time, so it was not feasible to systematically explore and side view. training from scratch for significantly longer intervals. ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body Tasks • 39:9 relative to our motion capture, but there was still more warehouse data relative to toss data even with this upsampling. We observed that while the upsampled toss NPMP learned an arguably slightly more aesthetically satisfying toss behavior (no meaningful change in performance), it was more difficult for the upsampled toss NPMP to learn the warehouse task. In figure 9A, we show comparisons of these different NPMPs on the warehouse task. While ultimately, the upsampled toss NPMP was able to learn the warehouse task, it was consistently lower and less robust for other hyperparameters. In addition to the balance of expert data, we also examined the need to initialize the behavior in different phases of the warehouse task. In the warehouse task, the training episodes are initialized in all phases of the task in poses sampled from motion capture, forming a curriculum over variations. In the toss task, we did not initialize Fig. 8. Performance for the “toss” task: (A) Representative learning episodes in different task phases. To illustrate the need for starting curves (best of 3 seeds) comparing vision-based and state-based perfor- the warehouse task in the various phases, we ran comparisons mance on the toss task, as a function of learner update steps. (B) For the involving starting only in the pickup or walk phases of the task and trained state-based policy, heatmap indicates the episode return as a func- found that neither of these are able to learn to solve the task (see tion of initial ball velocity. (C) Representative filmstrip of behavior in the figure 9B). warehouse task from egocentric and side view. We also explored both decreasing and increasing the range of pro- cedural variations across episodes. Based on previous work [Heess et al. 2017], it was our starting intuition to design the task with a partway through training resulted in policies that are more conser- sensible range of variations to facilitate learning – this meant that vative, scored fewer points, but might subjectively be considered our initial distribution of variations basically worked. However, we to look more humanlike (less hurried). This is consistent with the also attempted to train the task policy to perform the task with only humanlikeness of the movements being determined largely by the large boxes. We probed the original task policy trained on variable low-level controller, but performance of the task becoming increas- box size on variants of the warehouse task that only included larger ingly hectic as the task policy ultimately controls the body to move boxes, and we see that training with variations improves perfor- faster and with extreme movements to achieve more reward. For an mance on the probe task (figure 9C). Essentially, it was much more example of a policy trained for less time, see Video 8. difficult to learn to solve this task without the variations in box size 4.3 Task variations In addition to demonstrating performance on the core tasks, a few themes emerged in developing our approach, for which we provide illustrative examples. In particular, some trends that we observed include: (1) the ratio of expert skills in the NPMP matter, (2) the initializations at different phases of the task matter for the ware- house task, but aren’t required for the toss task, & (3) more extreme variations benefit from a curriculum via variations (a similar result is reported in [Heess et al. 2017]). First, we consider how important the relative ratios of different skills are in the NPMP. In extreme cases, this is trivially important. For example, an NPMP module that only contained locomotion skills, without object interactions, would intuitively offer limited utility for transfer to the warehouse task. A more nuanced question is how important the relative quantities of ball tossing behavior versus Fig. 9. Ablations and probes. (A) Performance on the warehouse task as a function of using NPMPs trained with different ratios of expert data. “Mixed” warehouse behavior affect the ability of the NPMP to learn the two uses natural proportions of all of our warehouse and ball tossing data, “no tasks. For illustration, we trained three NPMPs, one that only had toss” omits all tossing data, and “toss++” uses ball toss experts upsampled access to warehouse experts, one that had both warehouse experts by a factor of two. (B) Comparison of performance on the warehouse task and ball toss experts in proportion to how much was collected (more under the default setting involving initializations at “all” phases of the task motion capture was warehouse relative to toss demonstrations), and versus training with initializations restricted to either the “pickup” or “walk” one that trained on twice as much data from toss experts – that is, phases. (C) We trained the task policy to perform the warehouse task with when training the NPMP, we recorded twice as many trajectories either the baseline variation in box sizes (blue) or only a smaller range of from ball toss experts as we did for other experts, thereby over- large boxes (orange) and then evaluated performance only interacting with large boxes. Variation on the wider distribution during training improved representing these experts in the NPMP training data. Note that performance on the evaluation tasks. in the toss upsampled NPMP, toss experts are over-represented ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
39:10 • Merel et al. – no policy fully solved the task. For representative failure mode We have outlined a generic architectural scheme for motor reuse, behavior, see Video 9. within which it is possible to implement the encoder and decoder Finally, we considered training on a wider distribution than our using various specific neural networks. We have elected to use the standard range of pedestal heights and this tended to work – this simple choice of shallow MLPs (both our encoder and decoder have indicates that a broader, continuous task distribution could allow two hidden layers). Conceptually, we view the specific choice of net- a policy to perform a wide range of movements, so long as explo- work as an important, but secondary, consideration in the context ration and learning are guided from some examples that are initially of the overall approach. Network engineering may further improve achievable. See a representative Video 10 showing performance this scheme, for instance through either faster learning or in terms when trained on this broader range of pedestal heights, including of motion quality. In particular, Peng et al. 2019 have proposed an pedestals that are quite low to the ground as well as higher up. alternative architecture that could be applied in this setting involv- ing additional multiplicative structure and composable primitives. Although Peng et al. 2019 reported that their multiplicative com- 5 DISCUSSION positional policies (MCP) network structure performed better than In this work, we demonstrated an approach for transfer of motor an MLP in their settings, our own exploratory investigation of the skills involving whole body humanoid movement and object in- reported MCP architecture (using 8 primitives) did not reproduce teraction. We showed that a relatively small set of demonstration this benefit. Instead, we found that while MCP reuse did produce data can be used to provide a fairly generic low-level motor skill generally similar movements in early stages of learning, it neither space that can be leveraged to improve exploration and learning took off faster nor achieved effective performance in the warehouse on various tasks that can be solved via movements similar to those setting. We speculate that this difference may have to do with the in the expert demonstrations. Importantly, a single skill module is necessary degrees of freedom for the task – in the warehouse set- multipotent, permitting reuse on multiple transfer tasks. The result- ting, limiting the reusable control to compositions of a discrete set ing task controllers can follow high-level goals and adapt naturally of primitives may impair their reusability outside of the movements to changes or interactive perturbations of the scene and object de- that are highly represented in the reference data. Regardless, as a tails (see Video 1). These interactions with trained controllers are comparison of decoder architectures is not a focus of this work, we enabled by the ability to deploy trained controllers in real-time on did not pursue this deeply, and we leave more systematic compari- a standard computer. Critically, a physics-based controller always son of architectural choices to future work. responds to a scene in a manner that is consistent with the physics There are a few additional caveats concerning the present ap- of the world, unlike kinematic approaches which can generalize proach that are related to the difficulty of exploration and learning in physically impossible ways. Furthermore, the use of egocentric in complicated tasks. We train the task policies by model-free RL, vision induces natural behavioral phenomena such as directing the and this is not efficient with respect to data (requiring many environ- gaze towards objects of relevance; but perhaps more significantly, it ment interactions and learner updates). Substantially, this slowness makes task-specific scene representations unnecessary. The agent arises from dithering exploration at the level of the task policy. can understand what to do by looking at the scene. While we use low-level skills to structure exploration, this alone is What differentiates our approach from most preceding work that not sufficient to learn to control high-dimensional bodies interacting leverages demonstrations for physics-based control is that we syn- with objects, especially from only sparse rewards. We are optimistic thesize a single, multipotent skill module. Instead of having to stay that future improvements will accelerate learning, perhaps partly close to demonstrations of a single object interaction, we provide a through more intelligent, goal-directed exploration strategies. For large set of unlabeled demonstrations and automatically generalize example, the motif of using skills for exploration could potentially skills from them. One open question that we believe will be impor- be repeated hierarchically to encourage richer behavior. Another tant in future efforts involves how to best trade off the specificity of limitation is that, for the warehouse task, we leverage a curriculum exploration, provided by staying close to a narrow set of demonstra- via informative motion capture initializations, which expose the tions, versus generality obtained through leveraging more diverse agent to favorable states that it may not have discovered on its own. demonstrations. As we showed, there is still some sensitivity to the It is interesting to note that the use of initializations is not required relative ratios of the various skills in the space. It may be fundamen- for the ball toss, where the combination of the ball being thrown tal that there is some trade-off between exploration guidance and towards the humanoid (forcing it to engage) and a weak shaping generality, and it would be interesting to better understand this in reward to induce movement towards the box are adequate. high-dimensional control settings. Taken together, these limitations restrict the present approach A similar trade-off currently exists between generality and visual to simulation settings; however there is a growing literature on quality. We note that in this work, the task objectives are quite basic approaches involving transfer of policies trained in simulation to – essentially providing sparse indications of task progress. Where the real world systems (sim-to-real) [Rusu et al. 2017; Sadeghi and Levine controller generalizes beyond the motion capture, the behavior may 2017; Tobin et al. 2017; Andrychowicz et al. 2018; Zhu et al. 2018; look slightly less natural. We are optimistic that further refinement Tan et al. 2018; Hwangbo et al. 2019; Xie et al. 2019]. While we of the movement appearance could result from additional objectives believe that the study of sophistocated motor control problems in (e.g. smoothness or energy regularization) when training the task simulation is an important area of research in its own right, sim- policies, additional data that helps more completely cover the space to-real may offer a path to translate these results into real world of relevant behaviors, and adjustments to the physics of the body. applications. ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body Tasks • 39:11 ACKNOWLEDGMENTS Jemin Hwangbo, Joonho Lee, Alexey Dosovitskiy, Dario Bellicoso, Vassilios Tsounis, Vladlen Koltun, and Marco Hutter. 2019. Learning agile and dynamic motor skills We thank Tim Lillicrap for constructive input at the outset of the for legged robots. Science Robotics 4, 26 (2019), eaau5872. project, Vicky Langston for help coordinating the motion capture Odest Chadwicke Jenkins and Maja J Mataric. 2003. Automated derivation of behav- acquisition, Thomas Rothörl for assistance during our studio visit, ior vocabularies for autonomous humanoid motion. In Proceedings of the second international joint conference on Autonomous agents and multiagent systems. ACM, and Audiomotion Studios for services related to motion capture 225–232. collection and clean up. We also thank others at DeepMind for Seungsu Kim, Ashwini Shukla, and Aude Billard. 2014. Catching objects in flight. IEEE Transactions on Robotics 30, 5 (2014), 1049–1065. input and support throughout the project. Finally, we thank Jaakko Alex Klein, Zerrin Yumak, Arjen Beij, and A Frank van der Stappen. 2019. Data-driven Lehtinen for comments on the manuscript. Gaze Animation using Recurrent Neural Networks. In Motion, Interaction and Games. 1–11. Jens Kober and Jan R Peters. 2009. Policy search for motor primitives in robotics. In Advances in neural information processing systems. 849–856. REFERENCES Lucas Kovar, Michael Gleicher, and Frédéric Pighin. 2008. Motion graphs. In ACM SIGGRAPH 2008 classes. ACM, 51. Abbas Abdolmaleki, Jost Tobias Springenberg, Yuval Tassa, Remi Munos, Nicolas Vikash Kumar, Abhishek Gupta, Emanuel Todorov, and Sergey Levine. 2016. Learning Heess, and Martin Riedmiller. 2018. Maximum a posteriori policy optimisation. dexterous manipulation policies from experience and imitation. arXiv preprint In International Conference on Learning Representations. arXiv:1611.05095 (2016). Marcin Andrychowicz, Bowen Baker, Maciek Chociej, Rafal Jozefowicz, Bob McGrew, Jehee Lee, Jinxiang Chai, Paul SA Reitsma, Jessica K Hodgins, and Nancy S Pollard. Jakub Pachocki, Arthur Petron, Matthias Plappert, Glenn Powell, Alex Ray, et al. 2002. Interactive control of avatars animated with human motion data. In ACM 2018. Learning dexterous in-hand manipulation. arXiv preprint arXiv:1808.00177 Transactions on Graphics (ToG), Vol. 21. ACM, 491–500. (2018). Seunghwan Lee, Moonseok Park, Kyoungmin Lee, and Jehee Lee. 2019. Scalable muscle- Okan Arikan and David A Forsyth. 2002. Interactive motion generation from examples. actuated human simulation and control. ACM Transactions on Graphics (TOG) 38, 4 In ACM Transactions on Graphics (TOG), Vol. 21. ACM, 483–490. (2019), 73. Ronald C Arkin, Ronald C Arkin, et al. 1998. Behavior-based robotics. MIT press. Sergey Levine, Yongjoon Lee, Vladlen Koltun, and Zoran Popović. 2011. Space-time Christopher G Atkeson and Stefan Schaal. 1997. Robot learning from demonstration. planning with parameterized locomotion controllers. ACM Transactions on Graphics In ICML, Vol. 97. Citeseer, 12–20. (TOG) 30, 3 (2011), 1–11. Kevin Bergamin, Simon Clavet, Daniel Holden, and James Richard Forbes. 2019. DReCon: Libin Liu and Jessica Hodgins. 2018. Learning basketball dribbling skills using trajectory data-driven responsive control of physics-based characters. ACM Transactions on optimization and deep supervised learning. ACM Transactions on Graphics (TOG) Graphics (TOG) 38, 6 (2019), 206. 37, 4 (2018), 142. Yu-Wei Chao, Jimei Yang, Weifeng Chen, and Jia Deng. 2019. Learning to sit: Synthesiz- Libin Liu, KangKang Yin, Michiel van de Panne, and Baining Guo. 2012. Terrain runner: ing human-chair interactions via hierarchical control. arXiv preprint arXiv:1908.07423 control, parameterization, composition, and planning for highly dynamic motions. (2019). ACM Transactions on Graphics (TOG) 31, 6 (2012), 154. Nuttapong Chentanez, Matthias Müller, Miles Macklin, Viktor Makoviychuk, and Stefan Libin Liu, KangKang Yin, Michiel van de Panne, Tianjia Shao, and Weiwei Xu. 2010. Jeschke. 2018. Physics-based motion capture imitation with deep reinforcement Sampling-based contact-rich motion control. In ACM SIGGRAPH 2010 papers. 1–10. learning. In Proceedings of the 11th Annual International Conference on Motion, Josh Merel, Arun Ahuja, Vu Pham, Saran Tunyasuvunakool, Siqi Liu, Dhruva Tiru- Interaction, and Games. 1–10. mala, Nicolas Heess, and Greg Wayne. 2019a. Hierarchical visuomotor control of Adam Coates, Pieter Abbeel, and Andrew Y Ng. 2008. Learning for control from multi- humanoids. In International Conference on Learning Representations. ple demonstrations. In Proceedings of the 25th international conference on Machine Josh Merel, Matthew Botvinick, and Greg Wayne. 2019b. Hierarchical motor control in learning. ACM, 144–151. mammals and machines. Nature Communications 10, 1 (2019), 1–12. Stelian Coros, Philippe Beaudoin, and Michiel Van de Panne. 2010. Generalized biped Josh Merel, Leonard Hasenclever, Alexandre Galashov, Arun Ahuja, Vu Pham, Greg walking control. In ACM Transactions on Graphics (TOG), Vol. 29. ACM, 130. Wayne, Yee Whye Teh, and Nicolas Heess. 2019c. Neural probabilistic motor primi- Peter Englert and Marc Toussaint. 2018. Learning manipulation skills from a single tives for humanoid control. In International Conference on Learning Representations. demonstration. The International Journal of Robotics Research 37, 1 (2018), 137–154. Josh Merel, Yuval Tassa, Sriram Srinivasan, Jay Lemmon, Ziyu Wang, Greg Wayne, and Haegwang Eom, Daseong Han, Joseph S Shin, and Junyong Noh. 2019. Model Predictive Nicolas Heess. 2017. Learning human behaviors from motion capture by adversarial Control with a Visuomotor System for Physics-based Character Animation. ACM imitation. arXiv preprint arXiv:1707.02201 (2017). Transactions on Graphics (TOG) 39, 1 (2019), 1–11. Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Lasse Espeholt, Hubert Soyer, Remi Munos, Karen Simonyan, Volodymyr Mnih, Tom Bellemare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, Ward, Yotam Doron, Vlad Firoiu, Tim Harley, Iain Dunning, et al. 2018. IMPALA: et al. 2015. Human-level control through deep supervised learning. Nature 518, Scalable Distributed Deep-RL with Importance Weighted Actor-Learner Architec- 7540 (2015), 529. tures. In International Conference on Machine Learning. 1406–1415. Igor Mordatch, Emanuel Todorov, and Zoran Popović. 2012. Discovery of complex Petros Faloutsos, Michiel van de Panne, and Demetri Terzopoulos. 2001. Composable behaviors through contact-invariant optimization. ACM Transactions on Graphics Controllers for Physics-Based Character Animation. In Proceedings of the 28th An- (TOG) 31, 4 (2012), 43. nual Conference on Computer Graphics and Interactive Techniques. Association for Masaki Nakada, Tao Zhou, Honglin Chen, Tomer Weiss, and Demetri Terzopoulos. Computing Machinery. 2018. Deep learning of biomimetic sensorimotor control for biomechanical human Florent Guenter, Micha Hersch, Sylvain Calinon, and Aude Billard. 2007. Reinforcement animation. ACM Transactions on Graphics (TOG) 37, 4 (2018), 1–15. learning for imitating constrained reaching movements. Advanced Robotics 21, 13 Andrew Y Ng and Stuart J Russell. 2000. Algorithms for Inverse supervised learning. (2007), 1521–1544. In Proceedings of the Seventeenth International Conference on Machine Learning. Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning Morgan Kaufmann Publishers Inc., 663–670. for image recognition. In Proceedings of the IEEE conference on computer vision and Scott Niekum, Sarah Osentoski, George Konidaris, and Andrew G Barto. 2012. Learning pattern recognition. 770–778. and generalization of complex tasks from unstructured demonstrations. In 2012 Nicolas Heess, TB Dhruva, Srinivasan Sriram, Jay Lemmon, Josh Merel, Greg Wayne, IEEE/RSJ International Conference on Intelligent Robots and Systems. IEEE, 5239–5246. Yuval Tassa, Tom Erez, Ziyu Wang, Ali Eslami, et al. 2017. Emergence of Locomotion Kazuya Otani and Karim Bouyarmane. 2017. Adaptive whole-body manipulation Behaviours in Rich Environments. arXiv preprint arXiv:1707.02286 (2017). in human-to-humanoid multi-contact motion retargeting. In 2017 IEEE-RAS 17th Nicolas Heess, Greg Wayne, Yuval Tassa, Timothy Lillicrap, Martin Riedmiller, and International Conference on Humanoid Robotics (Humanoids). IEEE, 446–453. David Silver. 2016. Learning and transfer of modulated locomotor controllers. arXiv Soohwan Park, Hoseok Ryu, Seyoung Lee, Sunmin Lee, and Jehee Lee. 2019. Learn- preprint arXiv:1610.05182 (2016). ing predict-and-simulate policies from unorganized human motion data. ACM Jonathan Ho and Stefano Ermon. 2016. Generative adversarial imitation learning. In Transactions on Graphics (TOG) 38, 6 (2019), 205. Advances in neural information processing systems. 4565–4573. Peter Pastor, Mrinal Kalakrishnan, Sachin Chitta, Evangelos Theodorou, and Stefan Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural Schaal. 2011. Skill learning and task outcome prediction for manipulation. In 2011 computation 9, 8 (1997), 1735–1780. IEEE International Conference on Robotics and Automation. IEEE, 3828–3834. Daniel Holden, Taku Komura, and Jun Saito. 2017. Phase-functioned neural networks Tomislav Pejsa, Daniel Rakita, Bilge Mutlu, and Michael Gleicher. 2016. Authoring for character control. ACM Transactions on Graphics (TOG) 36, 4 (2017), 42. directed gaze for full-body motion capture. ACM Transactions on Graphics (TOG) Katherine RS Holzbaur, Wendy M Murray, and Scott L Delp. 2005. A model of the upper 35, 6 (2016), 1–11. extremity for simulating musculoskeletal surgery and analyzing neuromuscular control. Annals of biomedical engineering 33, 6 (2005), 829–840. ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
39:12 • Merel et al. Xue Bin Peng, Pieter Abbeel, Sergey Levine, and Michiel van de Panne. 2018. DeepMimic: Tingfan Wu, Yuval Tassa, Vikash Kumar, Javier Movellan, and Emanuel Todorov. 2013. Example-guided deep supervised learning of physics-based character skills. ACM STAC: Simultaneous tracking and calibration. In 2013 13th IEEE-RAS International Transactions on Graphics (TOG) 37, 4 (2018), 143. Conference on Humanoid Robots (Humanoids). IEEE, 469–476. Xue Bin Peng, Glen Berseth, and Michiel Van de Panne. 2016. Terrain-adaptive locomo- Zhaoming Xie, Patrick Clary, Jeremy Dao, Pedro Morais, Jonathan Hurst, and Michiel tion skills using deep supervised learning. ACM Transactions on Graphics (TOG) van de Panne. 2019. Iterative supervised learning based design of dynamic 35, 4 (2016), 81. locomotion skills for cassie. arXiv preprint arXiv:1903.09537 (2019). Xue Bin Peng, Glen Berseth, KangKang Yin, and Michiel Van De Panne. 2017. DeepLoco: Sang Hoon Yeo, Martin Lesmana, Debanga R Neog, and Dinesh K Pai. 2012. Eyecatch: Dynamic locomotion skills using hierarchical deep supervised learning. ACM Simulating visuomotor coordination for object interception. ACM Transactions on Transactions on Graphics (TOG) 36, 4 (2017), 41. Graphics (TOG) 31, 4 (2012), 1–10. Xue Bin Peng, Michael Chang, Grace Zhang, Pieter Abbeel, and Sergey Levine. 2019. KangKang Yin, Kevin Loken, and Michiel Van de Panne. 2007. Simbicon: Simple biped MCP: Learning Composable Hierarchical Control with Multiplicative Compositional locomotion control. In ACM Transactions on Graphics (TOG), Vol. 26. ACM, 105. Policies. arXiv preprint arXiv:1905.09808 (2019). Andy Zeng, Shuran Song, Johnny Lee, Alberto Rodriguez, and Thomas Funkhouser. Jan Peters and Stefan Schaal. 2008. supervised learning of motor skills with policy 2019. TossingBot: Learning to Throw Arbitrary Objects with Residual Physics. gradients. Neural networks 21, 4 (2008), 682–697. Robotics: Science and Systems. Rolf Pfeifer and Christian Scheier. 2001. Understanding intelligence. MIT Press. Yuke Zhu, Ziyu Wang, Josh Merel, Andrei Rusu, Tom Erez, Serkan Cabi, Saran Tunya- Marc H Raibert and Jessica K Hodgins. 1991. Animation of dynamic legged locomotion. suvunakool, János Kramár, Raia Hadsell, Nando de Freitas, and Nicolas Heess. 2018. In Proceedings of the 18th annual conference on Computer graphics and interactive Reinforcement and imitation learning for diverse visuomotor skills. In Robotics: techniques. 349–358. Science and Systems. Kerstin Ruhland, Christopher E Peters, Sean Andrist, Jeremy B Badler, Norman I Badler, Michael Gleicher, Bilge Mutlu, and Rachel McDonnell. 2015. A review of eye gaze in virtual agents, social robotics and hci: Behaviour generation, user interaction and APPENDICES perception. In Computer graphics forum, Vol. 34. Wiley Online Library, 299–326. A SIMULTANEOUS TRACKING AND CALIBRATION Andrei A Rusu, Mel Večerík, Thomas Rothörl, Nicolas Heess, Razvan Pascanu, and Raia Hadsell. 2017. Sim-to-Real Robot Learning from Pixels with Progressive Nets. In Simultaneous tracking and calibration (STAC) is an algorithm for Conference on Robot Learning. 262–270. Fereshteh Sadeghi and Sergey Levine. 2017. CAD2RL: Real Single-Image Flight Without inferring joint angles of a body from point-cloud data when it is a Single Real Image. In Robotics: Science and Systems. not known in advance precisely where the markers are on the body Stefan Schaal. 1997. Learning from demonstration. In Advances in neural information processing systems. 1040–1046. [Wu et al. 2013]. The relevant variables include the body which has Stefan Schaal, Auke Ijspeert, and Aude Billard. 2003. Computational approaches to a pose (q(cid:174)) as well as marker positions that are fixed to it (x(cid:174) m). We motor learning by imitation. Philosophical Transactions of the Royal Society of London. observe via motion capture the sensor readings (s(cid:174)⋆) which should Series B: Biological Sciences 358, 1431 (2003), 537–547. Luis Sentis and Oussama Khatib. 2005. Synthesis of whole-body behaviors through be equal to the positions of the markers at each timestep, up to hierarchical control of behavioral primitives. International Journal of Humanoid negligible noise. STAC makes the assumption that the markers are Robotics 2, 04 (2005), 505–518. David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, rigidly attached to the body with fixed offsets (x(cid:174) m) – if those offsets Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, et al. are known, a forward kinematics call (f (·)) allows us to compute k 2018. A general supervised learning algorithm that masters chess, shogi, and Go the positions at which we expect sensor readings. through self-play. Science 362, 6419 (2018), 1140–1144. William D Smart and L Pack Kaelbling. 2002. Effective supervised learning for For known marker offsets, the pose of the body (q(cid:174)) can be inferred mobile robots. In Proceedings 2002 IEEE International Conference on Robotics and by optimizing (per frame): Automation (Cat. No. 02CH37292), Vol. 4. IEEE, 3404–3410. H F Sr oa yn ec ri ,s JS ao cn kg W, A Rb ab ea ,s SA ebbd No ol um ra yl ,e Aki r, uJ nos At hT uo jb ai ,a Ss iqS ip Lri in ug , e Dn hb re ur vg a, A Tii rd ua mn aC lala ,r ek t, aH l.u 2b 0e 2r 0t . arg min || f k (q(cid:174), x(cid:174) m) − s(cid:174)⋆|| 22 (4) V-MPO: On-Policy Maximum a Posteriori Policy Optimization for Discrete and q(cid:174) Continuous Control. In International Conference on Learning Representations. Nathan Sprague, Dana Ballard, and Al Robinson. 2007. Modeling embodied visual We additionally know that the marker offsets should be the same behaviors. ACM Transactions on Applied Perception (TAP) 4, 2 (2007), 11–es. at every timestep (assuming rigid attachment of markers). So sim- Sebastian Starke, He Zhang, Taku Komura, and Jun Saito. 2019. Neural state machine for character-scene interactions. ACM Transactions on Graphics (TOG) 38, 6 (2019), ilarly, if the pose of the body is known, the marker offsets can be 209. inferred by optimizing: Jie Tan, Tingnan Zhang, Erwin Coumans, Atil Iscen, Yunfei Bai, Danijar Hafner, Steven Bohez, and Vincent Vanhoucke. 2018. Sim-to-real: Learning agile locomotion for (cid:213) quadruped robots. arXiv preprint arXiv:1804.10332 (2018). arg min || f k (q(cid:174) i , x(cid:174) m) − s(cid:174) i⋆|| 22 (5) Yuval Tassa, Yotam Doron, Alistair Muldal, Tom Erez, Yazhe Li, Diego de Las Casas, x(cid:174) m i David Budden, Abbas Abdolmaleki, Josh Merel, Andrew Lefrancq, Timothy Lillicrap, and Martin Riedmiller. 2018. DeepMind control suite. arXiv preprint arXiv:1801.00690 So overall, to perform joint optimization over unknown marker (2018). offsets and poses, we alternate between these optimization steps. Demetri Terzopoulos and Tamer F Rabie. 1995. Animat vision: Active vision in artificial animals. In Proceedings of IEEE International Conference on Computer Vision. IEEE, We initialize the pose of the body to the null pose (approximately a 801–808. t-pose) and roughly initialize the marker offsets by placing markers Josh Tobin, Rachel Fong, Alex Ray, Jonas Schneider, Wojciech Zaremba, and Pieter Abbeel. 2017. Domain randomization for transferring deep neural networks from on the body part, without precise tuning. The first optimization is simulation to the real world. In 2017 IEEE/RSJ International Conference on Intelligent of the pose, using the initial, coarsely placed markers (per frame). Robots and Systems (IROS). IEEE, 23–30. We then optimize the marker positions using frames sampled at a Emanuel Todorov, Tom Erez, and Yuval Tassa. 2012. MuJoCo: A physics engine for model-based control. In 2012 IEEE/RSJ International Conference on Intelligent Robots regular interval throughout a range-of-motion Video 11. We then and Systems. IEEE, 5026–5033. re-optimize the joint angles per frame. We found that further alter- Michiel Van de Panne and Eugene Fiume. 1993. Sensor-actuator networks. In Proceedings nation was not required and the marker offsets that are found using of the 20th annual conference on Computer graphics and interactive techniques. ACM, 335–342. the range-of-motion clip worked well for all other clips. Mel Večerík, Todd Hester, Jonathan Scholz, Fumin Wang, Olivier Pietquin, Bilal Piot, In practice we also use a small regularization term, encouraging Nicolas Heess, Thomas Rothörl, Thomas Lampe, and Martin Riedmiller. 2017. Lever- aging demonstrations for deep supervised learning on robotics problems with joints angles to be near the null pose, and we also warm start the sparse rewards. arXiv preprint arXiv:1707.08817 (2017). per-frame optimization at the inferred pose from the preceding timestep. ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
Catch & Carry: Reusable Neural Controllers for Vision-Guided Whole-Body Tasks • 39:13 B SINGLE-CLIP TRACKING OBJECTIVE In the main text, we described that the tracking reward arises from a weighted sum of terms that score how well different features of the reference are being tracked. More specifically, these objectives are: Eori = || log(q(cid:174) ori · q(cid:174) o⋆ r− i 1)|| 2 Egyro = 0.1 · ||q(cid:174) gyro − q(cid:174) g⋆ yro|| 2 E obj = ||x(cid:174) obj − x(cid:174) o⋆ bj|| 2 1 (cid:213) Eqpos = Nqpos |q(cid:174) pos − q(cid:174) p⋆ os | Fig. A.1. One-shot analyses: Here we depict, by behavior category, the one- 1 (cid:213) E qvel = N qvel |q(cid:174) vel − q(cid:174) v⋆ el| s hh ao pt pp ee nr sfo ifrm anan ec xe peo rf tt ih se imtra pi en re fd ecN t P aM ndP t. hN eo ote neth -sa ht or tel ia mti iv te atp ioe nrfo isrm effa en cc te iv> ely1 1 (cid:213) denoised. Eapp = Napp ||x(cid:174) app − x(cid:174) a⋆ pp|| 2 1 (cid:213) E vel = 0.1 · N |x(cid:174) vel − x(cid:174) v⋆ el| freely (note that we varied the number of boxes and pedestals as well, vel not reported in this paper, and results are similar). The distance of where q(cid:174) represents the pose or velocity and q(cid:174)⋆ represents the each pedestal from the origin is individually drawn from a uniform reference value. The x(cid:174) app and x(cid:174) obj are 3D Cartesian vectors from distribution between 2.5 and 3.5 meters, and the pedestals are at the root to the various appendages (head, hands, feet) or object (box equispaced angles around the origin. The height of each pedestal is or ball) in the root frame. The root is located in the pelvis of the set randomly from between 0.45 and 0.75 meters. The size of each humanoid. x(cid:174) vel is in the global reference frame. In this work, for the box is taken from one of our motion capture trajectories, but with a body terms, we used coefficients wqpos = 5, w qvel = 1, wori = 20, random multiplicative variation of between 0.75 and 1.25 applied. wapp = 2, w vel = 1, wgyro = 1. This has been used in previous work The mass of each box is also individually drawn from a uniform [Merel et al. 2019a]. The object tracking term coefficient, new to distribution between 2kg and 7kg (the real boxes are either 3kg or this work, was tuned to w obj = 10 to relative strongly enforce object 10kg). The size and mass of each box is not directly provided as an tracking. The same values are used for all clips, despite the diversity observation to the agent. of behaviors, indicated relative robustness of this approach. This task can be logically divided into four phases: walk empty- handed to a pedestal (GOTO), lifting the box from a pedestal (LIFT), C ONE-SHOT IMITATION EVALUATION carrying the box to a different pedestal (CARRY), and putting it One-shot imitation involves providing the trained NPMP with a down on the target pedestal (PUTDOWN). In our current work, we state-sequence and asking it to generate a sequence of actions that provide the agent with an observation that tells it which of these would reproduce that movement. In asking the trained NPMP to four phases it should be pursuing at a given timestep, as a one-hot perform one-shot imitation, we get a glimpse into which skills it vector. The position of the focal pedestal and focal box relative to is able to perform well, and we can be assess this performance for the walker is also provided as observations, where the focal box is overlapping subcategories of clips. Note that one-shot imitation is the box that needs to be moved, and the focal pedestal is dependent not actually the objective that the NPMP was trained to perform, on the phase of the task: in GOTO and LIFT it is the pedestal on and one-shot imitation is difficult due to object interactions (see which the box is initially placed, while in CARRY and PUTDOWN figure A.1). Both walking behavior and ball toss behavior are better it is the target pedestal. Each of the four phases has well-defined captured than the pickup and putdown interactions with boxes. success criteria, as detailed in Table 1 (an empty cell indicates that This presumably reflects the fact that in terms of timesteps of data, a particular type of criterion is not used to determine success of a there are fewer moments at which the difficult box interactions phase). are being performed. As such, these quantifications may leave a At each timestep, task logic determines whether the agent has misleading impression that one-shot behavior is worse than it is. To successfully completed its current phase. If it has, a reward of 1.0 complement these quantitative metrics, we also provide a Video 12 is given at that timestep only, and the task is advanced to the next showing a representative assortment of one-shot behavior which phase. The phase transition is determined by a simple state machine: show that while the object interactions can be difficult, movements GOTO → LIFT → CARRY → PUTDOWN → GOTO → ..., are broadly sensible. and the task repeats indefinitely up to a final episode duration (15s D INSTRUCTED WAREHOUSE TASK DETAILS simulated time), at which point the episode is terminated with boot- The warehouse task rewards moving a box from one pedestal to strapping. While there is no prespecified maximum score, obtaining another, and repeating this process. The environment consists of a an undiscounted return greater than 10 within a 15s episode re- flat ground with four pedestals and two boxes that can be moved quires moving through the phases rapidly. Note that the episode ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
39:14 • Merel et al. Phase Walker posi- Walker/box Pedestal/box component, we compute a random target height (dz between .1 and tion contact contact .4m from the ground), and then we analytically compute the time GOTO within 0.65 at which the ball should hit the humanoid (t hit = dx /vx ) as well meter of focal as the initial vertical velocity required to hit the randomly selected pedestal target (vz = (4.9t h2 it + dz )/t hit ). For robustness, random angular LIFT at least one no contact velocities are also applied to the ball at the initial timestep. contact point points The incentives of the task are specified through rewards and with each termination logic. The primary element of the task is that if the hand ball touches the ground or if the humanoid falls (contact between CARRY within 0.65 at least one a non-foot geom of the walker and the ground plane), the episode meter of focal contact point terminates with a negative reward. This strongly disincentivizes pedestal with each letting the ball fall to the ground and encourages the humanoid to hand remain standing. Even reliably achieving this level of performance PUTDOWN no contact at least 4 con- over the range of procedural ball trajectories is difficult. In addition, points tact points once the ball reaches the humanoid, a shaping reward is activated Table 1. The four phases of the warehouse task. that corresponds to a small positive per-timestep reward inversely related to the distance between the ball and the bucket (in the x-y plane, neglecting vertical height). This reward encourages the humanoid, after catching the ball to walk towards the bucket. Finally, is terminated with a failure (no bootstrapping) if either the walker if the ball is in the bucket, there is a moderate per-timestep reward falls (contact between a non-foot geom of the walker and the ground encouraging dropping the ball into the bucket – this final reward is plane) or if a box is dropped (contact between one of the boxes and sparse in the sense that it is achieved iff there is a contact between the ground plane). the bottom of the bucket and the ball. Once the agent has learned to At the beginning of each episode, after randomly sampling the drop the ball into the bucket, it learns to do this earlier (i.e. throw variations described above, one of the four phases is sampled uni- the ball) to achieve the reward as soon as possible. formly as the initial phase for the episode. A motion capture tra- F SUPPLEMENTARY VIDEO CAPTIONS jectory is picked at random, and a random timestep from the clip consistent with the active phase in the episode is sampled. Note Video 1 Overview video summarizing highlights of the paper. that the motion capture clips can be automatically segmented into Video 2: Kinematic playback of a motion capture clip of a box phases by simply applying the task logic to the motion capture ref- interaction. erence, so no manual segmentation is required (beyond defining the Video 3: Kinematic playback of a motion capture clip of ball tossing. task). The joint configuration of the walker, the position of the box Video 4: A representative illustration of the behavior of a success- relative to the walker, and both the walker’s and box’s velocities, fully trained vision-based policy on the “warehouse” task. are synchronized to the state from this motion capture timestep. Video 5: A representative illustration of the behavior of a success- If the episode begins in either the LIFT or PUTDOWN phase, the fully trained vision-based policy on the “toss” task. displacement of the walker from the focal pedestal is also synchro- Video 6: A representative illustration of the behavior learned by a nized, otherwise we apply a random translation and rotation around policy trained from scratch on the “toss” task (from state). the z-axis (i.e. yaw) to the walker and prop together as a rigid body. Video 7: A representative illustration of the behavior learned by a policy trained from scratch on the “warehouse” task (from vision). E BALL TOSS TASK DETAILS Video 8: A representative illustration of the behavior of a partially The toss task encourages catching a ball and subsequently throwing trained vision-based policy on the “warehouse” task. it into a bucket. The initial pose of the walker is randomly sampled Video 9: A representative illustration of the behavior learned on from a range of motion capture poses related to ball tossing. The the “warehouse” task when training only with large boxes. ball size and mass are procedurally randomized (radius randomly Video 10: A representative illustration of the behavior of a suc- multiplied by a factor uniformaly sampled between .95 and 1.5; mass cessfully trained vision-based policy on the “warehouse” task when sampled uniformly from the range of 2 to 4kg) and the angle and trained on a wider range of pedestal heights. velocity of the ball are also procedurally randomized such that the Video 11: Kinematic playback of a range-of-motion motion capture ball is generally “thrown” towards the humanoid. More precisely, clip used for STAC calibration. the ball is always initialized in middair, behind the bucket, at a Video 12: Examples of one-shot imitation of object interaction distance of roughly 3m from the humanoid (dx ). To initialize the ball behaviors. velocity in a way that ensures it is projected towards the humanoid in an appropriate strike zone, we must determine initial 3D velocity components of the ball, which define its trajectory. We first pick a random velocity towards the humanoid (vx between 1.5 and 4.5m/s). We can also select a random horizontal velocity relative to the walker (vy between .75m/s leftwards or rightwards). For the vertical ACM Trans. Graph., Vol. 39, No. 4, Article 39. Publication date: July 2020.
